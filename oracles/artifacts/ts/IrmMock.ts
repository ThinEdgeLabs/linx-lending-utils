/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as IrmMockContractJson } from "../lib/linx-lending-core/contracts/test/IrmMock.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  MarketParams,
  MarketState,
  Position,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace IrmMockTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    initInterest: {
      params: CallContractParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    borrowRate: {
      params: CallContractParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    wMulDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    wTaylorCompounded: {
      params: CallContractParams<{ x: bigint; n: bigint }>;
      result: CallContractResult<bigint>;
    };
    exactlyOneZero: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<boolean>;
    };
    zeroFloorSub: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    min: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    toBaseUnits: {
      params: CallContractParams<{ amount: bigint; tokenDecimals: bigint }>;
      result: CallContractResult<bigint>;
    };
    calculateBorrowRate: {
      params: CallContractParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    borrowRateView: {
      params: CallContractParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    initInterest: {
      params: SignExecuteContractMethodParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrowRate: {
      params: SignExecuteContractMethodParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wMulDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivUp: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivDown: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivUp: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wTaylorCompounded: {
      params: SignExecuteContractMethodParams<{ x: bigint; n: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    exactlyOneZero: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    zeroFloorSub: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    min: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    toBaseUnits: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        tokenDecimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateBorrowRate: {
      params: SignExecuteContractMethodParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrowRateView: {
      params: SignExecuteContractMethodParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<IrmMockInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  consts = { WAD: BigInt("1000000000000000000") };

  at(address: string): IrmMockInstance {
    return new IrmMockInstance(address);
  }

  tests = {
    initInterest: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { marketParams: MarketParams; marketState: MarketState }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "initInterest", params, getContractByCodeHash);
    },
    borrowRate: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { marketParams: MarketParams; marketState: MarketState }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "borrowRate", params, getContractByCodeHash);
    },
    wMulDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wMulDown", params, getContractByCodeHash);
    },
    wDivDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wDivDown", params, getContractByCodeHash);
    },
    wDivUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wDivUp", params, getContractByCodeHash);
    },
    mulDivDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { x: bigint; y: bigint; d: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDivDown", params, getContractByCodeHash);
    },
    mulDivUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { x: bigint; y: bigint; d: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDivUp", params, getContractByCodeHash);
    },
    wTaylorCompounded: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; n: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: bigint; b: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "exactlyOneZero", params, getContractByCodeHash);
    },
    zeroFloorSub: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "zeroFloorSub", params, getContractByCodeHash);
    },
    min: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: bigint; b: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { amount: bigint; tokenDecimals: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toBaseUnits", params, getContractByCodeHash);
    },
    calculateBorrowRate: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { marketParams: MarketParams; marketState: MarketState }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateBorrowRate",
        params,
        getContractByCodeHash
      );
    },
    borrowRateView: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { marketParams: MarketParams; marketState: MarketState }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "borrowRateView", params, getContractByCodeHash);
    },
  };

  stateForTest(initFields: {}, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const IrmMock = new Factory(
  Contract.fromJson(
    IrmMockContractJson,
    "",
    "976d2216ba8d895ace4ab93ac23811becac08809cbc8646b075cdbda7c8adb21",
    AllStructs
  )
);
registerContract(IrmMock);

// Use this class to interact with the blockchain
export class IrmMockInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<IrmMockTypes.State> {
    return fetchContractState(IrmMock, this);
  }

  view = {
    initInterest: async (
      params: IrmMockTypes.CallMethodParams<"initInterest">
    ): Promise<IrmMockTypes.CallMethodResult<"initInterest">> => {
      return callMethod(
        IrmMock,
        this,
        "initInterest",
        params,
        getContractByCodeHash
      );
    },
    borrowRate: async (
      params: IrmMockTypes.CallMethodParams<"borrowRate">
    ): Promise<IrmMockTypes.CallMethodResult<"borrowRate">> => {
      return callMethod(
        IrmMock,
        this,
        "borrowRate",
        params,
        getContractByCodeHash
      );
    },
    wMulDown: async (
      params: IrmMockTypes.CallMethodParams<"wMulDown">
    ): Promise<IrmMockTypes.CallMethodResult<"wMulDown">> => {
      return callMethod(
        IrmMock,
        this,
        "wMulDown",
        params,
        getContractByCodeHash
      );
    },
    wDivDown: async (
      params: IrmMockTypes.CallMethodParams<"wDivDown">
    ): Promise<IrmMockTypes.CallMethodResult<"wDivDown">> => {
      return callMethod(
        IrmMock,
        this,
        "wDivDown",
        params,
        getContractByCodeHash
      );
    },
    wDivUp: async (
      params: IrmMockTypes.CallMethodParams<"wDivUp">
    ): Promise<IrmMockTypes.CallMethodResult<"wDivUp">> => {
      return callMethod(IrmMock, this, "wDivUp", params, getContractByCodeHash);
    },
    mulDivDown: async (
      params: IrmMockTypes.CallMethodParams<"mulDivDown">
    ): Promise<IrmMockTypes.CallMethodResult<"mulDivDown">> => {
      return callMethod(
        IrmMock,
        this,
        "mulDivDown",
        params,
        getContractByCodeHash
      );
    },
    mulDivUp: async (
      params: IrmMockTypes.CallMethodParams<"mulDivUp">
    ): Promise<IrmMockTypes.CallMethodResult<"mulDivUp">> => {
      return callMethod(
        IrmMock,
        this,
        "mulDivUp",
        params,
        getContractByCodeHash
      );
    },
    wTaylorCompounded: async (
      params: IrmMockTypes.CallMethodParams<"wTaylorCompounded">
    ): Promise<IrmMockTypes.CallMethodResult<"wTaylorCompounded">> => {
      return callMethod(
        IrmMock,
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: IrmMockTypes.CallMethodParams<"exactlyOneZero">
    ): Promise<IrmMockTypes.CallMethodResult<"exactlyOneZero">> => {
      return callMethod(
        IrmMock,
        this,
        "exactlyOneZero",
        params,
        getContractByCodeHash
      );
    },
    zeroFloorSub: async (
      params: IrmMockTypes.CallMethodParams<"zeroFloorSub">
    ): Promise<IrmMockTypes.CallMethodResult<"zeroFloorSub">> => {
      return callMethod(
        IrmMock,
        this,
        "zeroFloorSub",
        params,
        getContractByCodeHash
      );
    },
    min: async (
      params: IrmMockTypes.CallMethodParams<"min">
    ): Promise<IrmMockTypes.CallMethodResult<"min">> => {
      return callMethod(IrmMock, this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: IrmMockTypes.CallMethodParams<"toBaseUnits">
    ): Promise<IrmMockTypes.CallMethodResult<"toBaseUnits">> => {
      return callMethod(
        IrmMock,
        this,
        "toBaseUnits",
        params,
        getContractByCodeHash
      );
    },
    calculateBorrowRate: async (
      params: IrmMockTypes.CallMethodParams<"calculateBorrowRate">
    ): Promise<IrmMockTypes.CallMethodResult<"calculateBorrowRate">> => {
      return callMethod(
        IrmMock,
        this,
        "calculateBorrowRate",
        params,
        getContractByCodeHash
      );
    },
    borrowRateView: async (
      params: IrmMockTypes.CallMethodParams<"borrowRateView">
    ): Promise<IrmMockTypes.CallMethodResult<"borrowRateView">> => {
      return callMethod(
        IrmMock,
        this,
        "borrowRateView",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    initInterest: async (
      params: IrmMockTypes.SignExecuteMethodParams<"initInterest">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"initInterest">> => {
      return signExecuteMethod(IrmMock, this, "initInterest", params);
    },
    borrowRate: async (
      params: IrmMockTypes.SignExecuteMethodParams<"borrowRate">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"borrowRate">> => {
      return signExecuteMethod(IrmMock, this, "borrowRate", params);
    },
    wMulDown: async (
      params: IrmMockTypes.SignExecuteMethodParams<"wMulDown">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"wMulDown">> => {
      return signExecuteMethod(IrmMock, this, "wMulDown", params);
    },
    wDivDown: async (
      params: IrmMockTypes.SignExecuteMethodParams<"wDivDown">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"wDivDown">> => {
      return signExecuteMethod(IrmMock, this, "wDivDown", params);
    },
    wDivUp: async (
      params: IrmMockTypes.SignExecuteMethodParams<"wDivUp">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"wDivUp">> => {
      return signExecuteMethod(IrmMock, this, "wDivUp", params);
    },
    mulDivDown: async (
      params: IrmMockTypes.SignExecuteMethodParams<"mulDivDown">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"mulDivDown">> => {
      return signExecuteMethod(IrmMock, this, "mulDivDown", params);
    },
    mulDivUp: async (
      params: IrmMockTypes.SignExecuteMethodParams<"mulDivUp">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"mulDivUp">> => {
      return signExecuteMethod(IrmMock, this, "mulDivUp", params);
    },
    wTaylorCompounded: async (
      params: IrmMockTypes.SignExecuteMethodParams<"wTaylorCompounded">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"wTaylorCompounded">> => {
      return signExecuteMethod(IrmMock, this, "wTaylorCompounded", params);
    },
    exactlyOneZero: async (
      params: IrmMockTypes.SignExecuteMethodParams<"exactlyOneZero">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"exactlyOneZero">> => {
      return signExecuteMethod(IrmMock, this, "exactlyOneZero", params);
    },
    zeroFloorSub: async (
      params: IrmMockTypes.SignExecuteMethodParams<"zeroFloorSub">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"zeroFloorSub">> => {
      return signExecuteMethod(IrmMock, this, "zeroFloorSub", params);
    },
    min: async (
      params: IrmMockTypes.SignExecuteMethodParams<"min">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"min">> => {
      return signExecuteMethod(IrmMock, this, "min", params);
    },
    toBaseUnits: async (
      params: IrmMockTypes.SignExecuteMethodParams<"toBaseUnits">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"toBaseUnits">> => {
      return signExecuteMethod(IrmMock, this, "toBaseUnits", params);
    },
    calculateBorrowRate: async (
      params: IrmMockTypes.SignExecuteMethodParams<"calculateBorrowRate">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"calculateBorrowRate">> => {
      return signExecuteMethod(IrmMock, this, "calculateBorrowRate", params);
    },
    borrowRateView: async (
      params: IrmMockTypes.SignExecuteMethodParams<"borrowRateView">
    ): Promise<IrmMockTypes.SignExecuteMethodResult<"borrowRateView">> => {
      return signExecuteMethod(IrmMock, this, "borrowRateView", params);
    },
  };

  async multicall<Calls extends IrmMockTypes.MultiCallParams>(
    calls: Calls
  ): Promise<IrmMockTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends IrmMockTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<IrmMockTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends IrmMockTypes.MultiCallParams | IrmMockTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(IrmMock, this, callss, getContractByCodeHash);
  }
}
