/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as MockDIAOracleContractJson } from "../MockDIAOracle.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, AllStructs } from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace MockDIAOracleTypes {
  export type State = Omit<ContractState<any>, "fields">;
  export type PriceSetEvent = ContractEvent<{
    key: HexString;
    price: bigint;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    setPrice: {
      params: CallContractParams<{ key: HexString; price: bigint }>;
      result: CallContractResult<null>;
    };
    getValue: {
      params: CallContractParams<{ key: HexString }>;
      result: CallContractResult<[bigint, bigint]>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    setPrice: {
      params: SignExecuteContractMethodParams<{
        key: HexString;
        price: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getValue: {
      params: SignExecuteContractMethodParams<{ key: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { prices?: Map<HexString, DIAOracleValue> };
}

class Factory extends ContractFactory<MockDIAOracleInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  eventIndex = { PriceSet: 0 };

  at(address: string): MockDIAOracleInstance {
    return new MockDIAOracleInstance(address);
  }

  tests = {
    setPrice: async (
      params: Omit<
        TestContractParams<
          never,
          { key: HexString; price: bigint },
          MockDIAOracleTypes.Maps
        >,
        "initialFields"
      >
    ): Promise<TestContractResult<null, MockDIAOracleTypes.Maps>> => {
      return testMethod(this, "setPrice", params, getContractByCodeHash);
    },
    getValue: async (
      params: Omit<
        TestContractParams<never, { key: HexString }, MockDIAOracleTypes.Maps>,
        "initialFields"
      >
    ): Promise<
      TestContractResult<[bigint, bigint], MockDIAOracleTypes.Maps>
    > => {
      return testMethod(this, "getValue", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: {},
    asset?: Asset,
    address?: string,
    maps?: MockDIAOracleTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const MockDIAOracle = new Factory(
  Contract.fromJson(
    MockDIAOracleContractJson,
    "=6-2+55=2-2+91=11-1+a=76+7a7e0214696e73657274206174206d617020706174683a2000=152",
    "55e3be8289094ade1e893c234b1e0ec1d0169afb728c008cb311d325c6c306f6",
    AllStructs
  )
);
registerContract(MockDIAOracle);

// Use this class to interact with the blockchain
export class MockDIAOracleInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    prices: new RalphMap<HexString, DIAOracleValue>(
      MockDIAOracle.contract,
      this.contractId,
      "prices"
    ),
  };

  async fetchState(): Promise<MockDIAOracleTypes.State> {
    return fetchContractState(MockDIAOracle, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePriceSetEvent(
    options: EventSubscribeOptions<MockDIAOracleTypes.PriceSetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      MockDIAOracle.contract,
      this,
      options,
      "PriceSet",
      fromCount
    );
  }

  view = {
    setPrice: async (
      params: MockDIAOracleTypes.CallMethodParams<"setPrice">
    ): Promise<MockDIAOracleTypes.CallMethodResult<"setPrice">> => {
      return callMethod(
        MockDIAOracle,
        this,
        "setPrice",
        params,
        getContractByCodeHash
      );
    },
    getValue: async (
      params: MockDIAOracleTypes.CallMethodParams<"getValue">
    ): Promise<MockDIAOracleTypes.CallMethodResult<"getValue">> => {
      return callMethod(
        MockDIAOracle,
        this,
        "getValue",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    setPrice: async (
      params: MockDIAOracleTypes.SignExecuteMethodParams<"setPrice">
    ): Promise<MockDIAOracleTypes.SignExecuteMethodResult<"setPrice">> => {
      return signExecuteMethod(MockDIAOracle, this, "setPrice", params);
    },
    getValue: async (
      params: MockDIAOracleTypes.SignExecuteMethodParams<"getValue">
    ): Promise<MockDIAOracleTypes.SignExecuteMethodResult<"getValue">> => {
      return signExecuteMethod(MockDIAOracle, this, "getValue", params);
    },
  };

  async multicall<Calls extends MockDIAOracleTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MockDIAOracleTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends MockDIAOracleTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<MockDIAOracleTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | MockDIAOracleTypes.MultiCallParams
      | MockDIAOracleTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      MockDIAOracle,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
