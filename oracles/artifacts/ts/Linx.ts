/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as LinxContractJson } from "../lib/linx-lending-core/contracts/Linx.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  MarketParams,
  MarketState,
  Position,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace LinxTypes {
  export type Fields = {
    marketTemplate: HexString;
    owner: Address;
    feeRecipient: Address;
  };

  export type State = ContractState<Fields>;

  export type MarketCreatedEvent = ContractEvent<{
    marketId: HexString;
    marketContractId: HexString;
    loanToken: HexString;
    collateralToken: HexString;
    oracle: HexString;
    interestRateModel: HexString;
    loanToValue: bigint;
  }>;
  export type SetOwnerEvent = ContractEvent<{
    newOwner: Address;
    oldOwner: Address;
  }>;
  export type SetFeeEvent = ContractEvent<{ id: HexString; newFee: bigint }>;
  export type SetFeeRecipientEvent = ContractEvent<{
    newFeeRecipient: Address;
    oldFeeRecipient: Address;
  }>;
  export type EnabledRateModelEvent = ContractEvent<{
    interestRateModel: HexString;
  }>;
  export type EnabledLoanToValueEvent = ContractEvent<{ loanToValue: bigint }>;
  export type SupplyEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    assets: bigint;
    shares: bigint;
  }>;
  export type WithdrawEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    receiver: Address;
    assets: bigint;
    shares: bigint;
  }>;
  export type BorrowEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    receiver: Address;
    assets: bigint;
    shares: bigint;
  }>;
  export type RepayEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    assets: bigint;
    shares: bigint;
  }>;
  export type SupplyCollateralEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    assets: bigint;
  }>;
  export type WithdrawCollateralEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    onBehalf: Address;
    receiver: Address;
    assets: bigint;
  }>;
  export type LiquidateEvent = ContractEvent<{
    marketId: HexString;
    caller: Address;
    borrower: Address;
    repaidAssets: bigint;
    repaidShares: bigint;
    seizedAssets: bigint;
    badDebtAssets: bigint;
    badDebtShares: bigint;
  }>;
  export type AccrueInterestEvent = ContractEvent<{
    marketId: HexString;
    prevBorrowRate: bigint;
    interest: bigint;
    feeShares: bigint;
  }>;
  export type SetAuthorizedEvent = ContractEvent<{
    users: Address;
    onBehalf: Address;
    status: boolean;
  }>;

  export interface CallMethodTable {
    owner: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    feeRecipient: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    isRateModelEnabled: {
      params: CallContractParams<{ interestRateModel: HexString }>;
      result: CallContractResult<boolean>;
    };
    isLoanToValueEnabled: {
      params: CallContractParams<{ loanToValue: bigint }>;
      result: CallContractResult<boolean>;
    };
    position: {
      params: CallContractParams<{ marketId: HexString; user: Address }>;
      result: CallContractResult<Position>;
    };
    market: {
      params: CallContractParams<{ marketId: HexString }>;
      result: CallContractResult<MarketState>;
    };
    marketParamsById: {
      params: CallContractParams<{ marketId: HexString }>;
      result: CallContractResult<MarketParams>;
    };
    enableRateModel: {
      params: CallContractParams<{ interestRateModel: HexString }>;
      result: CallContractResult<null>;
    };
    enableLoanToValue: {
      params: CallContractParams<{ loanToValue: bigint }>;
      result: CallContractResult<null>;
    };
    setOwner: {
      params: CallContractParams<{ newOwner: Address }>;
      result: CallContractResult<null>;
    };
    setFee: {
      params: CallContractParams<{ market: MarketParams; fee: bigint }>;
      result: CallContractResult<null>;
    };
    setFeeRecipient: {
      params: CallContractParams<{ newFeeRecipient: Address }>;
      result: CallContractResult<null>;
    };
    createMarket: {
      params: CallContractParams<{ market: MarketParams }>;
      result: CallContractResult<null>;
    };
    supply: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
      }>;
      result: CallContractResult<null>;
    };
    supplyCollateral: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        onBehalf: Address;
      }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: CallContractResult<null>;
    };
    withdrawCollateral: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: CallContractResult<null>;
    };
    borrow: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: CallContractResult<null>;
    };
    repay: {
      params: CallContractParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
      }>;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: CallContractParams<{
        market: MarketParams;
        borrower: Address;
        seizedAssets: bigint;
        repaidShares: bigint;
      }>;
      result: CallContractResult<null>;
    };
    accrueInterest: {
      params: CallContractParams<{ marketId: HexString }>;
      result: CallContractResult<null>;
    };
    calcMarketId: {
      params: CallContractParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
    createPositionKey: {
      params: CallContractParams<{ marketId: HexString; user: Address }>;
      result: CallContractResult<HexString>;
    };
    createAuthKey: {
      params: CallContractParams<{ onBehalf: Address; user: Address }>;
      result: CallContractResult<HexString>;
    };
    toSharesDown: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toAssetsDown: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toSharesUp: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toAssetsUp: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    wMulDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    wTaylorCompounded: {
      params: CallContractParams<{ x: bigint; n: bigint }>;
      result: CallContractResult<bigint>;
    };
    exactlyOneZero: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<boolean>;
    };
    zeroFloorSub: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    min: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    toBaseUnits: {
      params: CallContractParams<{ amount: bigint; tokenDecimals: bigint }>;
      result: CallContractResult<bigint>;
    };
    isAuthorized: {
      params: CallContractParams<{ onBehalf: Address }>;
      result: CallContractResult<boolean>;
    };
    marketId: {
      params: CallContractParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
    marketContract: {
      params: CallContractParams<{ marketId: HexString }>;
      result: CallContractResult<HexString>;
    };
    setAuthorized: {
      params: CallContractParams<{ user: Address; status: boolean }>;
      result: CallContractResult<null>;
    };
    isHealthyBorrow: {
      params: CallContractParams<{
        marketId: HexString;
        positionKey: HexString;
        collateralPrice: bigint;
      }>;
      result: CallContractResult<boolean>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    owner: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    feeRecipient: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    isRateModelEnabled: {
      params: SignExecuteContractMethodParams<{ interestRateModel: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    isLoanToValueEnabled: {
      params: SignExecuteContractMethodParams<{ loanToValue: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    position: {
      params: SignExecuteContractMethodParams<{
        marketId: HexString;
        user: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    market: {
      params: SignExecuteContractMethodParams<{ marketId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    marketParamsById: {
      params: SignExecuteContractMethodParams<{ marketId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    enableRateModel: {
      params: SignExecuteContractMethodParams<{ interestRateModel: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    enableLoanToValue: {
      params: SignExecuteContractMethodParams<{ loanToValue: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    setOwner: {
      params: SignExecuteContractMethodParams<{ newOwner: Address }>;
      result: SignExecuteScriptTxResult;
    };
    setFee: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        fee: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    setFeeRecipient: {
      params: SignExecuteContractMethodParams<{ newFeeRecipient: Address }>;
      result: SignExecuteScriptTxResult;
    };
    createMarket: {
      params: SignExecuteContractMethodParams<{ market: MarketParams }>;
      result: SignExecuteScriptTxResult;
    };
    supply: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    supplyCollateral: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        onBehalf: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawCollateral: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
        receiver: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    repay: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        assets: bigint;
        shares: bigint;
        onBehalf: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: SignExecuteContractMethodParams<{
        market: MarketParams;
        borrower: Address;
        seizedAssets: bigint;
        repaidShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    accrueInterest: {
      params: SignExecuteContractMethodParams<{ marketId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    calcMarketId: {
      params: SignExecuteContractMethodParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createPositionKey: {
      params: SignExecuteContractMethodParams<{
        marketId: HexString;
        user: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    createAuthKey: {
      params: SignExecuteContractMethodParams<{
        onBehalf: Address;
        user: Address;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toSharesDown: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toAssetsDown: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toSharesUp: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toAssetsUp: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wMulDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivUp: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivDown: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivUp: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wTaylorCompounded: {
      params: SignExecuteContractMethodParams<{ x: bigint; n: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    exactlyOneZero: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    zeroFloorSub: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    min: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    toBaseUnits: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        tokenDecimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    isAuthorized: {
      params: SignExecuteContractMethodParams<{ onBehalf: Address }>;
      result: SignExecuteScriptTxResult;
    };
    marketId: {
      params: SignExecuteContractMethodParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    marketContract: {
      params: SignExecuteContractMethodParams<{ marketId: HexString }>;
      result: SignExecuteScriptTxResult;
    };
    setAuthorized: {
      params: SignExecuteContractMethodParams<{
        user: Address;
        status: boolean;
      }>;
      result: SignExecuteScriptTxResult;
    };
    isHealthyBorrow: {
      params: SignExecuteContractMethodParams<{
        marketId: HexString;
        positionKey: HexString;
        collateralPrice: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    isRateModelEnabled?: Map<HexString, boolean>;
    isLoanToValueEnabled?: Map<bigint, boolean>;
    marketPositions?: Map<HexString, Position>;
    authorizedUsers?: Map<HexString, boolean>;
  };
}

class Factory extends ContractFactory<LinxInstance, LinxTypes.Fields> {
  encodeFields(fields: LinxTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    MarketCreated: 0,
    SetOwner: 1,
    SetFee: 2,
    SetFeeRecipient: 3,
    EnabledRateModel: 4,
    EnabledLoanToValue: 5,
    Supply: 6,
    Withdraw: 7,
    Borrow: 8,
    Repay: 9,
    SupplyCollateral: 10,
    WithdrawCollateral: 11,
    Liquidate: 12,
    AccrueInterest: 13,
    SetAuthorized: 14,
  };
  consts = {
    MAX_FEE: BigInt("250000000000000000"),
    MAX_LIQUIDATION_INCENTIVE_FACTOR: BigInt("1150000000000000000"),
    LIQUIDATION_CURSOR: BigInt("300000000000000000"),
    ORACLE_PRICE_SCALE: BigInt("1000000000000000000000000000000000000"),
    VIRTUAL_SHARES: BigInt("1000000"),
    VIRTUAL_ASSETS: BigInt("1"),
    WAD: BigInt("1000000000000000000"),
    ErrorCodes: {
      NotAuthorized: BigInt("0"),
      MarketExists: BigInt("1"),
      InvalidRateModel: BigInt("2"),
      InvalidLoanToValue: BigInt("3"),
      InvalidOracle: BigInt("4"),
      InvalidAsset: BigInt("5"),
      AlreadyEnabled: BigInt("6"),
      MarketDoesNotExist: BigInt("7"),
      ExceedMaxFee: BigInt("8"),
      ExceedMaxLoanToValue: BigInt("9"),
      ZeroAddress: BigInt("10"),
      InconsistentInput: BigInt("11"),
      InsufficientBalance: BigInt("12"),
      InsufficientLiquidity: BigInt("13"),
      InsufficientCollateral: BigInt("14"),
      HealthyPosition: BigInt("15"),
    },
  };

  at(address: string): LinxInstance {
    return new LinxInstance(address);
  }

  tests = {
    owner: async (
      params: Omit<
        TestContractParams<LinxTypes.Fields, never, LinxTypes.Maps>,
        "args"
      >
    ): Promise<TestContractResult<Address, LinxTypes.Maps>> => {
      return testMethod(this, "owner", params, getContractByCodeHash);
    },
    feeRecipient: async (
      params: Omit<
        TestContractParams<LinxTypes.Fields, never, LinxTypes.Maps>,
        "args"
      >
    ): Promise<TestContractResult<Address, LinxTypes.Maps>> => {
      return testMethod(this, "feeRecipient", params, getContractByCodeHash);
    },
    isRateModelEnabled: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { interestRateModel: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<boolean, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "isRateModelEnabled",
        params,
        getContractByCodeHash
      );
    },
    isLoanToValueEnabled: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { loanToValue: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<boolean, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "isLoanToValueEnabled",
        params,
        getContractByCodeHash
      );
    },
    position: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString; user: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<Position, LinxTypes.Maps>> => {
      return testMethod(this, "position", params, getContractByCodeHash);
    },
    market: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<MarketState, LinxTypes.Maps>> => {
      return testMethod(this, "market", params, getContractByCodeHash);
    },
    marketParamsById: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<MarketParams, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "marketParamsById",
        params,
        getContractByCodeHash
      );
    },
    enableRateModel: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { interestRateModel: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "enableRateModel", params, getContractByCodeHash);
    },
    enableLoanToValue: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { loanToValue: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "enableLoanToValue",
        params,
        getContractByCodeHash
      );
    },
    setOwner: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { newOwner: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "setOwner", params, getContractByCodeHash);
    },
    setFee: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { market: MarketParams; fee: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "setFee", params, getContractByCodeHash);
    },
    setFeeRecipient: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { newFeeRecipient: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "setFeeRecipient", params, getContractByCodeHash);
    },
    createMarket: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { market: MarketParams },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "createMarket", params, getContractByCodeHash);
    },
    supply: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          assets: bigint;
          shares: bigint;
          onBehalf: Address;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "supply", params, getContractByCodeHash);
    },
    supplyCollateral: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { market: MarketParams; assets: bigint; onBehalf: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "supplyCollateral",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          assets: bigint;
          shares: bigint;
          onBehalf: Address;
          receiver: Address;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    withdrawCollateral: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          assets: bigint;
          onBehalf: Address;
          receiver: Address;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "withdrawCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          assets: bigint;
          shares: bigint;
          onBehalf: Address;
          receiver: Address;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    repay: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          assets: bigint;
          shares: bigint;
          onBehalf: Address;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "repay", params, getContractByCodeHash);
    },
    liquidate: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          market: MarketParams;
          borrower: Address;
          seizedAssets: bigint;
          repaidShares: bigint;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
    accrueInterest: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "accrueInterest", params, getContractByCodeHash);
    },
    calcMarketId: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { loanToken: HexString; collateralToken: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<HexString, LinxTypes.Maps>> => {
      return testMethod(this, "calcMarketId", params, getContractByCodeHash);
    },
    createPositionKey: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString; user: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<HexString, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "createPositionKey",
        params,
        getContractByCodeHash
      );
    },
    createAuthKey: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { onBehalf: Address; user: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<HexString, LinxTypes.Maps>> => {
      return testMethod(this, "createAuthKey", params, getContractByCodeHash);
    },
    toSharesDown: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { assets: bigint; totalAssets: bigint; totalShares: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "toSharesDown", params, getContractByCodeHash);
    },
    toAssetsDown: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { shares: bigint; totalAssets: bigint; totalShares: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "toAssetsDown", params, getContractByCodeHash);
    },
    toSharesUp: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { assets: bigint; totalAssets: bigint; totalShares: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "toSharesUp", params, getContractByCodeHash);
    },
    toAssetsUp: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { shares: bigint; totalAssets: bigint; totalShares: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "toAssetsUp", params, getContractByCodeHash);
    },
    wMulDown: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "wMulDown", params, getContractByCodeHash);
    },
    wDivDown: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "wDivDown", params, getContractByCodeHash);
    },
    wDivUp: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "wDivUp", params, getContractByCodeHash);
    },
    mulDivDown: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint; d: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "mulDivDown", params, getContractByCodeHash);
    },
    mulDivUp: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint; d: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "mulDivUp", params, getContractByCodeHash);
    },
    wTaylorCompounded: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; n: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { a: bigint; b: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<boolean, LinxTypes.Maps>> => {
      return testMethod(this, "exactlyOneZero", params, getContractByCodeHash);
    },
    zeroFloorSub: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { x: bigint; y: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "zeroFloorSub", params, getContractByCodeHash);
    },
    min: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { a: bigint; b: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { amount: bigint; tokenDecimals: bigint },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<bigint, LinxTypes.Maps>> => {
      return testMethod(this, "toBaseUnits", params, getContractByCodeHash);
    },
    isAuthorized: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { onBehalf: Address },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<boolean, LinxTypes.Maps>> => {
      return testMethod(this, "isAuthorized", params, getContractByCodeHash);
    },
    marketId: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { loanToken: HexString; collateralToken: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<HexString, LinxTypes.Maps>> => {
      return testMethod(this, "marketId", params, getContractByCodeHash);
    },
    marketContract: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { marketId: HexString },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<HexString, LinxTypes.Maps>> => {
      return testMethod(this, "marketContract", params, getContractByCodeHash);
    },
    setAuthorized: async (
      params: TestContractParams<
        LinxTypes.Fields,
        { user: Address; status: boolean },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<null, LinxTypes.Maps>> => {
      return testMethod(this, "setAuthorized", params, getContractByCodeHash);
    },
    isHealthyBorrow: async (
      params: TestContractParams<
        LinxTypes.Fields,
        {
          marketId: HexString;
          positionKey: HexString;
          collateralPrice: bigint;
        },
        LinxTypes.Maps
      >
    ): Promise<TestContractResult<boolean, LinxTypes.Maps>> => {
      return testMethod(this, "isHealthyBorrow", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: LinxTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: LinxTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const Linx = new Factory(
  Contract.fromJson(
    LinxContractJson,
    "=32-2+9c=1-3+20e=1+23=1-2=2-1=1+c=2-4=1-1+f=2-2+17=2-2+5f=2-2+35=2-2+57=2-2+38=2-1=1-18=1-1=1-1=2+3=1-1=1-1+aa=1-1=1-1+12=3-1+f=3-1+c=3-1+a=3-2=1-2=2-2+82=2-2+a6=2-1+c=3+e14e=1-1+8=3-1+f=2+1e=1+f3=3-2+70=3+34fa=4-1+f4ffb=2+4=1-1+50535076=2-2+f0517f=645-1+e=110+7a7e0214696e73657274206174206d617020706174683a2000=31-1+5=146+7a7e0214696e73657274206174206d617020706174683a2000=417-1+c=578+7a7e0214696e73657274206174206d617020706174683a2000=27-1+d=283-1+d=38+7a7e0214696e73657274206174206d617020706174683a2000=283-1+5=137-1+d=38+7a7e0214696e73657274206174206d617020706174683a2000=3507-1+f=161+3=1+6007e021b4e6f2074696d6520656c617073656420666f72206d61726b6574201b2c20736b697070696e6720696e746572657374206163637275616c=1661-1+5=71-1+9=32+7a7e0214696e73657274206174206d617020706174683a2000=362",
    "73485c6e1e2cd11bcfaa29bc51d9b36156c33cc54f9f073992b9ff6a83874412",
    AllStructs
  )
);
registerContract(Linx);

// Use this class to interact with the blockchain
export class LinxInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    isRateModelEnabled: new RalphMap<HexString, boolean>(
      Linx.contract,
      this.contractId,
      "isRateModelEnabled"
    ),
    isLoanToValueEnabled: new RalphMap<bigint, boolean>(
      Linx.contract,
      this.contractId,
      "isLoanToValueEnabled"
    ),
    marketPositions: new RalphMap<HexString, Position>(
      Linx.contract,
      this.contractId,
      "marketPositions"
    ),
    authorizedUsers: new RalphMap<HexString, boolean>(
      Linx.contract,
      this.contractId,
      "authorizedUsers"
    ),
  };

  async fetchState(): Promise<LinxTypes.State> {
    return fetchContractState(Linx, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeMarketCreatedEvent(
    options: EventSubscribeOptions<LinxTypes.MarketCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "MarketCreated",
      fromCount
    );
  }

  subscribeSetOwnerEvent(
    options: EventSubscribeOptions<LinxTypes.SetOwnerEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "SetOwner",
      fromCount
    );
  }

  subscribeSetFeeEvent(
    options: EventSubscribeOptions<LinxTypes.SetFeeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "SetFee",
      fromCount
    );
  }

  subscribeSetFeeRecipientEvent(
    options: EventSubscribeOptions<LinxTypes.SetFeeRecipientEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "SetFeeRecipient",
      fromCount
    );
  }

  subscribeEnabledRateModelEvent(
    options: EventSubscribeOptions<LinxTypes.EnabledRateModelEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "EnabledRateModel",
      fromCount
    );
  }

  subscribeEnabledLoanToValueEvent(
    options: EventSubscribeOptions<LinxTypes.EnabledLoanToValueEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "EnabledLoanToValue",
      fromCount
    );
  }

  subscribeSupplyEvent(
    options: EventSubscribeOptions<LinxTypes.SupplyEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "Supply",
      fromCount
    );
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<LinxTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeBorrowEvent(
    options: EventSubscribeOptions<LinxTypes.BorrowEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "Borrow",
      fromCount
    );
  }

  subscribeRepayEvent(
    options: EventSubscribeOptions<LinxTypes.RepayEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "Repay",
      fromCount
    );
  }

  subscribeSupplyCollateralEvent(
    options: EventSubscribeOptions<LinxTypes.SupplyCollateralEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "SupplyCollateral",
      fromCount
    );
  }

  subscribeWithdrawCollateralEvent(
    options: EventSubscribeOptions<LinxTypes.WithdrawCollateralEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "WithdrawCollateral",
      fromCount
    );
  }

  subscribeLiquidateEvent(
    options: EventSubscribeOptions<LinxTypes.LiquidateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "Liquidate",
      fromCount
    );
  }

  subscribeAccrueInterestEvent(
    options: EventSubscribeOptions<LinxTypes.AccrueInterestEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "AccrueInterest",
      fromCount
    );
  }

  subscribeSetAuthorizedEvent(
    options: EventSubscribeOptions<LinxTypes.SetAuthorizedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Linx.contract,
      this,
      options,
      "SetAuthorized",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | LinxTypes.MarketCreatedEvent
      | LinxTypes.SetOwnerEvent
      | LinxTypes.SetFeeEvent
      | LinxTypes.SetFeeRecipientEvent
      | LinxTypes.EnabledRateModelEvent
      | LinxTypes.EnabledLoanToValueEvent
      | LinxTypes.SupplyEvent
      | LinxTypes.WithdrawEvent
      | LinxTypes.BorrowEvent
      | LinxTypes.RepayEvent
      | LinxTypes.SupplyCollateralEvent
      | LinxTypes.WithdrawCollateralEvent
      | LinxTypes.LiquidateEvent
      | LinxTypes.AccrueInterestEvent
      | LinxTypes.SetAuthorizedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Linx.contract, this, options, fromCount);
  }

  view = {
    owner: async (
      params?: LinxTypes.CallMethodParams<"owner">
    ): Promise<LinxTypes.CallMethodResult<"owner">> => {
      return callMethod(
        Linx,
        this,
        "owner",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    feeRecipient: async (
      params?: LinxTypes.CallMethodParams<"feeRecipient">
    ): Promise<LinxTypes.CallMethodResult<"feeRecipient">> => {
      return callMethod(
        Linx,
        this,
        "feeRecipient",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    isRateModelEnabled: async (
      params: LinxTypes.CallMethodParams<"isRateModelEnabled">
    ): Promise<LinxTypes.CallMethodResult<"isRateModelEnabled">> => {
      return callMethod(
        Linx,
        this,
        "isRateModelEnabled",
        params,
        getContractByCodeHash
      );
    },
    isLoanToValueEnabled: async (
      params: LinxTypes.CallMethodParams<"isLoanToValueEnabled">
    ): Promise<LinxTypes.CallMethodResult<"isLoanToValueEnabled">> => {
      return callMethod(
        Linx,
        this,
        "isLoanToValueEnabled",
        params,
        getContractByCodeHash
      );
    },
    position: async (
      params: LinxTypes.CallMethodParams<"position">
    ): Promise<LinxTypes.CallMethodResult<"position">> => {
      return callMethod(Linx, this, "position", params, getContractByCodeHash);
    },
    market: async (
      params: LinxTypes.CallMethodParams<"market">
    ): Promise<LinxTypes.CallMethodResult<"market">> => {
      return callMethod(Linx, this, "market", params, getContractByCodeHash);
    },
    marketParamsById: async (
      params: LinxTypes.CallMethodParams<"marketParamsById">
    ): Promise<LinxTypes.CallMethodResult<"marketParamsById">> => {
      return callMethod(
        Linx,
        this,
        "marketParamsById",
        params,
        getContractByCodeHash
      );
    },
    enableRateModel: async (
      params: LinxTypes.CallMethodParams<"enableRateModel">
    ): Promise<LinxTypes.CallMethodResult<"enableRateModel">> => {
      return callMethod(
        Linx,
        this,
        "enableRateModel",
        params,
        getContractByCodeHash
      );
    },
    enableLoanToValue: async (
      params: LinxTypes.CallMethodParams<"enableLoanToValue">
    ): Promise<LinxTypes.CallMethodResult<"enableLoanToValue">> => {
      return callMethod(
        Linx,
        this,
        "enableLoanToValue",
        params,
        getContractByCodeHash
      );
    },
    setOwner: async (
      params: LinxTypes.CallMethodParams<"setOwner">
    ): Promise<LinxTypes.CallMethodResult<"setOwner">> => {
      return callMethod(Linx, this, "setOwner", params, getContractByCodeHash);
    },
    setFee: async (
      params: LinxTypes.CallMethodParams<"setFee">
    ): Promise<LinxTypes.CallMethodResult<"setFee">> => {
      return callMethod(Linx, this, "setFee", params, getContractByCodeHash);
    },
    setFeeRecipient: async (
      params: LinxTypes.CallMethodParams<"setFeeRecipient">
    ): Promise<LinxTypes.CallMethodResult<"setFeeRecipient">> => {
      return callMethod(
        Linx,
        this,
        "setFeeRecipient",
        params,
        getContractByCodeHash
      );
    },
    createMarket: async (
      params: LinxTypes.CallMethodParams<"createMarket">
    ): Promise<LinxTypes.CallMethodResult<"createMarket">> => {
      return callMethod(
        Linx,
        this,
        "createMarket",
        params,
        getContractByCodeHash
      );
    },
    supply: async (
      params: LinxTypes.CallMethodParams<"supply">
    ): Promise<LinxTypes.CallMethodResult<"supply">> => {
      return callMethod(Linx, this, "supply", params, getContractByCodeHash);
    },
    supplyCollateral: async (
      params: LinxTypes.CallMethodParams<"supplyCollateral">
    ): Promise<LinxTypes.CallMethodResult<"supplyCollateral">> => {
      return callMethod(
        Linx,
        this,
        "supplyCollateral",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: LinxTypes.CallMethodParams<"withdraw">
    ): Promise<LinxTypes.CallMethodResult<"withdraw">> => {
      return callMethod(Linx, this, "withdraw", params, getContractByCodeHash);
    },
    withdrawCollateral: async (
      params: LinxTypes.CallMethodParams<"withdrawCollateral">
    ): Promise<LinxTypes.CallMethodResult<"withdrawCollateral">> => {
      return callMethod(
        Linx,
        this,
        "withdrawCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: LinxTypes.CallMethodParams<"borrow">
    ): Promise<LinxTypes.CallMethodResult<"borrow">> => {
      return callMethod(Linx, this, "borrow", params, getContractByCodeHash);
    },
    repay: async (
      params: LinxTypes.CallMethodParams<"repay">
    ): Promise<LinxTypes.CallMethodResult<"repay">> => {
      return callMethod(Linx, this, "repay", params, getContractByCodeHash);
    },
    liquidate: async (
      params: LinxTypes.CallMethodParams<"liquidate">
    ): Promise<LinxTypes.CallMethodResult<"liquidate">> => {
      return callMethod(Linx, this, "liquidate", params, getContractByCodeHash);
    },
    accrueInterest: async (
      params: LinxTypes.CallMethodParams<"accrueInterest">
    ): Promise<LinxTypes.CallMethodResult<"accrueInterest">> => {
      return callMethod(
        Linx,
        this,
        "accrueInterest",
        params,
        getContractByCodeHash
      );
    },
    calcMarketId: async (
      params: LinxTypes.CallMethodParams<"calcMarketId">
    ): Promise<LinxTypes.CallMethodResult<"calcMarketId">> => {
      return callMethod(
        Linx,
        this,
        "calcMarketId",
        params,
        getContractByCodeHash
      );
    },
    createPositionKey: async (
      params: LinxTypes.CallMethodParams<"createPositionKey">
    ): Promise<LinxTypes.CallMethodResult<"createPositionKey">> => {
      return callMethod(
        Linx,
        this,
        "createPositionKey",
        params,
        getContractByCodeHash
      );
    },
    createAuthKey: async (
      params: LinxTypes.CallMethodParams<"createAuthKey">
    ): Promise<LinxTypes.CallMethodResult<"createAuthKey">> => {
      return callMethod(
        Linx,
        this,
        "createAuthKey",
        params,
        getContractByCodeHash
      );
    },
    toSharesDown: async (
      params: LinxTypes.CallMethodParams<"toSharesDown">
    ): Promise<LinxTypes.CallMethodResult<"toSharesDown">> => {
      return callMethod(
        Linx,
        this,
        "toSharesDown",
        params,
        getContractByCodeHash
      );
    },
    toAssetsDown: async (
      params: LinxTypes.CallMethodParams<"toAssetsDown">
    ): Promise<LinxTypes.CallMethodResult<"toAssetsDown">> => {
      return callMethod(
        Linx,
        this,
        "toAssetsDown",
        params,
        getContractByCodeHash
      );
    },
    toSharesUp: async (
      params: LinxTypes.CallMethodParams<"toSharesUp">
    ): Promise<LinxTypes.CallMethodResult<"toSharesUp">> => {
      return callMethod(
        Linx,
        this,
        "toSharesUp",
        params,
        getContractByCodeHash
      );
    },
    toAssetsUp: async (
      params: LinxTypes.CallMethodParams<"toAssetsUp">
    ): Promise<LinxTypes.CallMethodResult<"toAssetsUp">> => {
      return callMethod(
        Linx,
        this,
        "toAssetsUp",
        params,
        getContractByCodeHash
      );
    },
    wMulDown: async (
      params: LinxTypes.CallMethodParams<"wMulDown">
    ): Promise<LinxTypes.CallMethodResult<"wMulDown">> => {
      return callMethod(Linx, this, "wMulDown", params, getContractByCodeHash);
    },
    wDivDown: async (
      params: LinxTypes.CallMethodParams<"wDivDown">
    ): Promise<LinxTypes.CallMethodResult<"wDivDown">> => {
      return callMethod(Linx, this, "wDivDown", params, getContractByCodeHash);
    },
    wDivUp: async (
      params: LinxTypes.CallMethodParams<"wDivUp">
    ): Promise<LinxTypes.CallMethodResult<"wDivUp">> => {
      return callMethod(Linx, this, "wDivUp", params, getContractByCodeHash);
    },
    mulDivDown: async (
      params: LinxTypes.CallMethodParams<"mulDivDown">
    ): Promise<LinxTypes.CallMethodResult<"mulDivDown">> => {
      return callMethod(
        Linx,
        this,
        "mulDivDown",
        params,
        getContractByCodeHash
      );
    },
    mulDivUp: async (
      params: LinxTypes.CallMethodParams<"mulDivUp">
    ): Promise<LinxTypes.CallMethodResult<"mulDivUp">> => {
      return callMethod(Linx, this, "mulDivUp", params, getContractByCodeHash);
    },
    wTaylorCompounded: async (
      params: LinxTypes.CallMethodParams<"wTaylorCompounded">
    ): Promise<LinxTypes.CallMethodResult<"wTaylorCompounded">> => {
      return callMethod(
        Linx,
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: LinxTypes.CallMethodParams<"exactlyOneZero">
    ): Promise<LinxTypes.CallMethodResult<"exactlyOneZero">> => {
      return callMethod(
        Linx,
        this,
        "exactlyOneZero",
        params,
        getContractByCodeHash
      );
    },
    zeroFloorSub: async (
      params: LinxTypes.CallMethodParams<"zeroFloorSub">
    ): Promise<LinxTypes.CallMethodResult<"zeroFloorSub">> => {
      return callMethod(
        Linx,
        this,
        "zeroFloorSub",
        params,
        getContractByCodeHash
      );
    },
    min: async (
      params: LinxTypes.CallMethodParams<"min">
    ): Promise<LinxTypes.CallMethodResult<"min">> => {
      return callMethod(Linx, this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: LinxTypes.CallMethodParams<"toBaseUnits">
    ): Promise<LinxTypes.CallMethodResult<"toBaseUnits">> => {
      return callMethod(
        Linx,
        this,
        "toBaseUnits",
        params,
        getContractByCodeHash
      );
    },
    isAuthorized: async (
      params: LinxTypes.CallMethodParams<"isAuthorized">
    ): Promise<LinxTypes.CallMethodResult<"isAuthorized">> => {
      return callMethod(
        Linx,
        this,
        "isAuthorized",
        params,
        getContractByCodeHash
      );
    },
    marketId: async (
      params: LinxTypes.CallMethodParams<"marketId">
    ): Promise<LinxTypes.CallMethodResult<"marketId">> => {
      return callMethod(Linx, this, "marketId", params, getContractByCodeHash);
    },
    marketContract: async (
      params: LinxTypes.CallMethodParams<"marketContract">
    ): Promise<LinxTypes.CallMethodResult<"marketContract">> => {
      return callMethod(
        Linx,
        this,
        "marketContract",
        params,
        getContractByCodeHash
      );
    },
    setAuthorized: async (
      params: LinxTypes.CallMethodParams<"setAuthorized">
    ): Promise<LinxTypes.CallMethodResult<"setAuthorized">> => {
      return callMethod(
        Linx,
        this,
        "setAuthorized",
        params,
        getContractByCodeHash
      );
    },
    isHealthyBorrow: async (
      params: LinxTypes.CallMethodParams<"isHealthyBorrow">
    ): Promise<LinxTypes.CallMethodResult<"isHealthyBorrow">> => {
      return callMethod(
        Linx,
        this,
        "isHealthyBorrow",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    owner: async (
      params: LinxTypes.SignExecuteMethodParams<"owner">
    ): Promise<LinxTypes.SignExecuteMethodResult<"owner">> => {
      return signExecuteMethod(Linx, this, "owner", params);
    },
    feeRecipient: async (
      params: LinxTypes.SignExecuteMethodParams<"feeRecipient">
    ): Promise<LinxTypes.SignExecuteMethodResult<"feeRecipient">> => {
      return signExecuteMethod(Linx, this, "feeRecipient", params);
    },
    isRateModelEnabled: async (
      params: LinxTypes.SignExecuteMethodParams<"isRateModelEnabled">
    ): Promise<LinxTypes.SignExecuteMethodResult<"isRateModelEnabled">> => {
      return signExecuteMethod(Linx, this, "isRateModelEnabled", params);
    },
    isLoanToValueEnabled: async (
      params: LinxTypes.SignExecuteMethodParams<"isLoanToValueEnabled">
    ): Promise<LinxTypes.SignExecuteMethodResult<"isLoanToValueEnabled">> => {
      return signExecuteMethod(Linx, this, "isLoanToValueEnabled", params);
    },
    position: async (
      params: LinxTypes.SignExecuteMethodParams<"position">
    ): Promise<LinxTypes.SignExecuteMethodResult<"position">> => {
      return signExecuteMethod(Linx, this, "position", params);
    },
    market: async (
      params: LinxTypes.SignExecuteMethodParams<"market">
    ): Promise<LinxTypes.SignExecuteMethodResult<"market">> => {
      return signExecuteMethod(Linx, this, "market", params);
    },
    marketParamsById: async (
      params: LinxTypes.SignExecuteMethodParams<"marketParamsById">
    ): Promise<LinxTypes.SignExecuteMethodResult<"marketParamsById">> => {
      return signExecuteMethod(Linx, this, "marketParamsById", params);
    },
    enableRateModel: async (
      params: LinxTypes.SignExecuteMethodParams<"enableRateModel">
    ): Promise<LinxTypes.SignExecuteMethodResult<"enableRateModel">> => {
      return signExecuteMethod(Linx, this, "enableRateModel", params);
    },
    enableLoanToValue: async (
      params: LinxTypes.SignExecuteMethodParams<"enableLoanToValue">
    ): Promise<LinxTypes.SignExecuteMethodResult<"enableLoanToValue">> => {
      return signExecuteMethod(Linx, this, "enableLoanToValue", params);
    },
    setOwner: async (
      params: LinxTypes.SignExecuteMethodParams<"setOwner">
    ): Promise<LinxTypes.SignExecuteMethodResult<"setOwner">> => {
      return signExecuteMethod(Linx, this, "setOwner", params);
    },
    setFee: async (
      params: LinxTypes.SignExecuteMethodParams<"setFee">
    ): Promise<LinxTypes.SignExecuteMethodResult<"setFee">> => {
      return signExecuteMethod(Linx, this, "setFee", params);
    },
    setFeeRecipient: async (
      params: LinxTypes.SignExecuteMethodParams<"setFeeRecipient">
    ): Promise<LinxTypes.SignExecuteMethodResult<"setFeeRecipient">> => {
      return signExecuteMethod(Linx, this, "setFeeRecipient", params);
    },
    createMarket: async (
      params: LinxTypes.SignExecuteMethodParams<"createMarket">
    ): Promise<LinxTypes.SignExecuteMethodResult<"createMarket">> => {
      return signExecuteMethod(Linx, this, "createMarket", params);
    },
    supply: async (
      params: LinxTypes.SignExecuteMethodParams<"supply">
    ): Promise<LinxTypes.SignExecuteMethodResult<"supply">> => {
      return signExecuteMethod(Linx, this, "supply", params);
    },
    supplyCollateral: async (
      params: LinxTypes.SignExecuteMethodParams<"supplyCollateral">
    ): Promise<LinxTypes.SignExecuteMethodResult<"supplyCollateral">> => {
      return signExecuteMethod(Linx, this, "supplyCollateral", params);
    },
    withdraw: async (
      params: LinxTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<LinxTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Linx, this, "withdraw", params);
    },
    withdrawCollateral: async (
      params: LinxTypes.SignExecuteMethodParams<"withdrawCollateral">
    ): Promise<LinxTypes.SignExecuteMethodResult<"withdrawCollateral">> => {
      return signExecuteMethod(Linx, this, "withdrawCollateral", params);
    },
    borrow: async (
      params: LinxTypes.SignExecuteMethodParams<"borrow">
    ): Promise<LinxTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(Linx, this, "borrow", params);
    },
    repay: async (
      params: LinxTypes.SignExecuteMethodParams<"repay">
    ): Promise<LinxTypes.SignExecuteMethodResult<"repay">> => {
      return signExecuteMethod(Linx, this, "repay", params);
    },
    liquidate: async (
      params: LinxTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<LinxTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(Linx, this, "liquidate", params);
    },
    accrueInterest: async (
      params: LinxTypes.SignExecuteMethodParams<"accrueInterest">
    ): Promise<LinxTypes.SignExecuteMethodResult<"accrueInterest">> => {
      return signExecuteMethod(Linx, this, "accrueInterest", params);
    },
    calcMarketId: async (
      params: LinxTypes.SignExecuteMethodParams<"calcMarketId">
    ): Promise<LinxTypes.SignExecuteMethodResult<"calcMarketId">> => {
      return signExecuteMethod(Linx, this, "calcMarketId", params);
    },
    createPositionKey: async (
      params: LinxTypes.SignExecuteMethodParams<"createPositionKey">
    ): Promise<LinxTypes.SignExecuteMethodResult<"createPositionKey">> => {
      return signExecuteMethod(Linx, this, "createPositionKey", params);
    },
    createAuthKey: async (
      params: LinxTypes.SignExecuteMethodParams<"createAuthKey">
    ): Promise<LinxTypes.SignExecuteMethodResult<"createAuthKey">> => {
      return signExecuteMethod(Linx, this, "createAuthKey", params);
    },
    toSharesDown: async (
      params: LinxTypes.SignExecuteMethodParams<"toSharesDown">
    ): Promise<LinxTypes.SignExecuteMethodResult<"toSharesDown">> => {
      return signExecuteMethod(Linx, this, "toSharesDown", params);
    },
    toAssetsDown: async (
      params: LinxTypes.SignExecuteMethodParams<"toAssetsDown">
    ): Promise<LinxTypes.SignExecuteMethodResult<"toAssetsDown">> => {
      return signExecuteMethod(Linx, this, "toAssetsDown", params);
    },
    toSharesUp: async (
      params: LinxTypes.SignExecuteMethodParams<"toSharesUp">
    ): Promise<LinxTypes.SignExecuteMethodResult<"toSharesUp">> => {
      return signExecuteMethod(Linx, this, "toSharesUp", params);
    },
    toAssetsUp: async (
      params: LinxTypes.SignExecuteMethodParams<"toAssetsUp">
    ): Promise<LinxTypes.SignExecuteMethodResult<"toAssetsUp">> => {
      return signExecuteMethod(Linx, this, "toAssetsUp", params);
    },
    wMulDown: async (
      params: LinxTypes.SignExecuteMethodParams<"wMulDown">
    ): Promise<LinxTypes.SignExecuteMethodResult<"wMulDown">> => {
      return signExecuteMethod(Linx, this, "wMulDown", params);
    },
    wDivDown: async (
      params: LinxTypes.SignExecuteMethodParams<"wDivDown">
    ): Promise<LinxTypes.SignExecuteMethodResult<"wDivDown">> => {
      return signExecuteMethod(Linx, this, "wDivDown", params);
    },
    wDivUp: async (
      params: LinxTypes.SignExecuteMethodParams<"wDivUp">
    ): Promise<LinxTypes.SignExecuteMethodResult<"wDivUp">> => {
      return signExecuteMethod(Linx, this, "wDivUp", params);
    },
    mulDivDown: async (
      params: LinxTypes.SignExecuteMethodParams<"mulDivDown">
    ): Promise<LinxTypes.SignExecuteMethodResult<"mulDivDown">> => {
      return signExecuteMethod(Linx, this, "mulDivDown", params);
    },
    mulDivUp: async (
      params: LinxTypes.SignExecuteMethodParams<"mulDivUp">
    ): Promise<LinxTypes.SignExecuteMethodResult<"mulDivUp">> => {
      return signExecuteMethod(Linx, this, "mulDivUp", params);
    },
    wTaylorCompounded: async (
      params: LinxTypes.SignExecuteMethodParams<"wTaylorCompounded">
    ): Promise<LinxTypes.SignExecuteMethodResult<"wTaylorCompounded">> => {
      return signExecuteMethod(Linx, this, "wTaylorCompounded", params);
    },
    exactlyOneZero: async (
      params: LinxTypes.SignExecuteMethodParams<"exactlyOneZero">
    ): Promise<LinxTypes.SignExecuteMethodResult<"exactlyOneZero">> => {
      return signExecuteMethod(Linx, this, "exactlyOneZero", params);
    },
    zeroFloorSub: async (
      params: LinxTypes.SignExecuteMethodParams<"zeroFloorSub">
    ): Promise<LinxTypes.SignExecuteMethodResult<"zeroFloorSub">> => {
      return signExecuteMethod(Linx, this, "zeroFloorSub", params);
    },
    min: async (
      params: LinxTypes.SignExecuteMethodParams<"min">
    ): Promise<LinxTypes.SignExecuteMethodResult<"min">> => {
      return signExecuteMethod(Linx, this, "min", params);
    },
    toBaseUnits: async (
      params: LinxTypes.SignExecuteMethodParams<"toBaseUnits">
    ): Promise<LinxTypes.SignExecuteMethodResult<"toBaseUnits">> => {
      return signExecuteMethod(Linx, this, "toBaseUnits", params);
    },
    isAuthorized: async (
      params: LinxTypes.SignExecuteMethodParams<"isAuthorized">
    ): Promise<LinxTypes.SignExecuteMethodResult<"isAuthorized">> => {
      return signExecuteMethod(Linx, this, "isAuthorized", params);
    },
    marketId: async (
      params: LinxTypes.SignExecuteMethodParams<"marketId">
    ): Promise<LinxTypes.SignExecuteMethodResult<"marketId">> => {
      return signExecuteMethod(Linx, this, "marketId", params);
    },
    marketContract: async (
      params: LinxTypes.SignExecuteMethodParams<"marketContract">
    ): Promise<LinxTypes.SignExecuteMethodResult<"marketContract">> => {
      return signExecuteMethod(Linx, this, "marketContract", params);
    },
    setAuthorized: async (
      params: LinxTypes.SignExecuteMethodParams<"setAuthorized">
    ): Promise<LinxTypes.SignExecuteMethodResult<"setAuthorized">> => {
      return signExecuteMethod(Linx, this, "setAuthorized", params);
    },
    isHealthyBorrow: async (
      params: LinxTypes.SignExecuteMethodParams<"isHealthyBorrow">
    ): Promise<LinxTypes.SignExecuteMethodResult<"isHealthyBorrow">> => {
      return signExecuteMethod(Linx, this, "isHealthyBorrow", params);
    },
  };

  async multicall<Calls extends LinxTypes.MultiCallParams>(
    calls: Calls
  ): Promise<LinxTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends LinxTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<LinxTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends LinxTypes.MultiCallParams | LinxTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Linx, this, callss, getContractByCodeHash);
  }
}
