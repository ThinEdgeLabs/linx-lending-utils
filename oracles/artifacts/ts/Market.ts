/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as MarketContractJson } from "../lib/linx-lending-core/contracts/Market.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  MarketParams,
  MarketState,
  Position,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace MarketTypes {
  export type Fields = {
    id: HexString;
    linxContractId: HexString;
    params: MarketParams;
    state: MarketState;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getMarketState: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<MarketState>;
    };
    getMarketParams: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<MarketParams>;
    };
    setMarketState: {
      params: CallContractParams<{ newState: MarketState }>;
      result: CallContractResult<null>;
    };
    supply: {
      params: CallContractParams<{ supplier: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ receiver: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    borrow: {
      params: CallContractParams<{ borrower: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    repay: {
      params: CallContractParams<{ repayee: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    supplyCollateral: {
      params: CallContractParams<{ supplier: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    withdrawCollateral: {
      params: CallContractParams<{ receiver: Address; assetsAmount: bigint }>;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: CallContractParams<{
        liquidator: Address;
        seizedAssets: bigint;
        repaidAssets: bigint;
      }>;
      result: CallContractResult<null>;
    };
    id: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getLinxContractId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getMarketState: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMarketParams: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setMarketState: {
      params: SignExecuteContractMethodParams<{ newState: MarketState }>;
      result: SignExecuteScriptTxResult;
    };
    supply: {
      params: SignExecuteContractMethodParams<{
        supplier: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        receiver: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{
        borrower: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    repay: {
      params: SignExecuteContractMethodParams<{
        repayee: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    supplyCollateral: {
      params: SignExecuteContractMethodParams<{
        supplier: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdrawCollateral: {
      params: SignExecuteContractMethodParams<{
        receiver: Address;
        assetsAmount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: SignExecuteContractMethodParams<{
        liquidator: Address;
        seizedAssets: bigint;
        repaidAssets: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    id: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLinxContractId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<MarketInstance, MarketTypes.Fields> {
  encodeFields(fields: MarketTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  consts = {
    ErrorCodes: {
      NotAuthorized: BigInt("0"),
      MarketExists: BigInt("1"),
      InvalidRateModel: BigInt("2"),
      InvalidLoanToValue: BigInt("3"),
      InvalidOracle: BigInt("4"),
      InvalidAsset: BigInt("5"),
      AlreadyEnabled: BigInt("6"),
      MarketDoesNotExist: BigInt("7"),
      ExceedMaxFee: BigInt("8"),
      ExceedMaxLoanToValue: BigInt("9"),
      ZeroAddress: BigInt("10"),
      InconsistentInput: BigInt("11"),
      InsufficientBalance: BigInt("12"),
      InsufficientLiquidity: BigInt("13"),
      InsufficientCollateral: BigInt("14"),
      HealthyPosition: BigInt("15"),
    },
  };

  at(address: string): MarketInstance {
    return new MarketInstance(address);
  }

  tests = {
    getMarketState: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<MarketState>> => {
      return testMethod(this, "getMarketState", params, getContractByCodeHash);
    },
    getMarketParams: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<MarketParams>> => {
      return testMethod(this, "getMarketParams", params, getContractByCodeHash);
    },
    setMarketState: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { newState: MarketState }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setMarketState", params, getContractByCodeHash);
    },
    supply: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { supplier: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "supply", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { receiver: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    borrow: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { borrower: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    repay: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { repayee: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "repay", params, getContractByCodeHash);
    },
    supplyCollateral: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { supplier: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "supplyCollateral",
        params,
        getContractByCodeHash
      );
    },
    withdrawCollateral: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { receiver: Address; assetsAmount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "withdrawCollateral",
        params,
        getContractByCodeHash
      );
    },
    liquidate: async (
      params: TestContractParamsWithoutMaps<
        MarketTypes.Fields,
        { liquidator: Address; seizedAssets: bigint; repaidAssets: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
    id: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "id", params, getContractByCodeHash);
    },
    getLinxContractId: async (
      params: Omit<
        TestContractParamsWithoutMaps<MarketTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "getLinxContractId",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: MarketTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Market = new Factory(
  Contract.fromJson(
    MarketContractJson,
    "",
    "54a33eac32852f590a65ee64e1db00404b2274fe9c0036d4efbc52cf9938fa26",
    AllStructs
  )
);
registerContract(Market);

// Use this class to interact with the blockchain
export class MarketInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<MarketTypes.State> {
    return fetchContractState(Market, this);
  }

  view = {
    getMarketState: async (
      params?: MarketTypes.CallMethodParams<"getMarketState">
    ): Promise<MarketTypes.CallMethodResult<"getMarketState">> => {
      return callMethod(
        Market,
        this,
        "getMarketState",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMarketParams: async (
      params?: MarketTypes.CallMethodParams<"getMarketParams">
    ): Promise<MarketTypes.CallMethodResult<"getMarketParams">> => {
      return callMethod(
        Market,
        this,
        "getMarketParams",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setMarketState: async (
      params: MarketTypes.CallMethodParams<"setMarketState">
    ): Promise<MarketTypes.CallMethodResult<"setMarketState">> => {
      return callMethod(
        Market,
        this,
        "setMarketState",
        params,
        getContractByCodeHash
      );
    },
    supply: async (
      params: MarketTypes.CallMethodParams<"supply">
    ): Promise<MarketTypes.CallMethodResult<"supply">> => {
      return callMethod(Market, this, "supply", params, getContractByCodeHash);
    },
    withdraw: async (
      params: MarketTypes.CallMethodParams<"withdraw">
    ): Promise<MarketTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        Market,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: MarketTypes.CallMethodParams<"borrow">
    ): Promise<MarketTypes.CallMethodResult<"borrow">> => {
      return callMethod(Market, this, "borrow", params, getContractByCodeHash);
    },
    repay: async (
      params: MarketTypes.CallMethodParams<"repay">
    ): Promise<MarketTypes.CallMethodResult<"repay">> => {
      return callMethod(Market, this, "repay", params, getContractByCodeHash);
    },
    supplyCollateral: async (
      params: MarketTypes.CallMethodParams<"supplyCollateral">
    ): Promise<MarketTypes.CallMethodResult<"supplyCollateral">> => {
      return callMethod(
        Market,
        this,
        "supplyCollateral",
        params,
        getContractByCodeHash
      );
    },
    withdrawCollateral: async (
      params: MarketTypes.CallMethodParams<"withdrawCollateral">
    ): Promise<MarketTypes.CallMethodResult<"withdrawCollateral">> => {
      return callMethod(
        Market,
        this,
        "withdrawCollateral",
        params,
        getContractByCodeHash
      );
    },
    liquidate: async (
      params: MarketTypes.CallMethodParams<"liquidate">
    ): Promise<MarketTypes.CallMethodResult<"liquidate">> => {
      return callMethod(
        Market,
        this,
        "liquidate",
        params,
        getContractByCodeHash
      );
    },
    id: async (
      params?: MarketTypes.CallMethodParams<"id">
    ): Promise<MarketTypes.CallMethodResult<"id">> => {
      return callMethod(
        Market,
        this,
        "id",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLinxContractId: async (
      params?: MarketTypes.CallMethodParams<"getLinxContractId">
    ): Promise<MarketTypes.CallMethodResult<"getLinxContractId">> => {
      return callMethod(
        Market,
        this,
        "getLinxContractId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getMarketState: async (
      params: MarketTypes.SignExecuteMethodParams<"getMarketState">
    ): Promise<MarketTypes.SignExecuteMethodResult<"getMarketState">> => {
      return signExecuteMethod(Market, this, "getMarketState", params);
    },
    getMarketParams: async (
      params: MarketTypes.SignExecuteMethodParams<"getMarketParams">
    ): Promise<MarketTypes.SignExecuteMethodResult<"getMarketParams">> => {
      return signExecuteMethod(Market, this, "getMarketParams", params);
    },
    setMarketState: async (
      params: MarketTypes.SignExecuteMethodParams<"setMarketState">
    ): Promise<MarketTypes.SignExecuteMethodResult<"setMarketState">> => {
      return signExecuteMethod(Market, this, "setMarketState", params);
    },
    supply: async (
      params: MarketTypes.SignExecuteMethodParams<"supply">
    ): Promise<MarketTypes.SignExecuteMethodResult<"supply">> => {
      return signExecuteMethod(Market, this, "supply", params);
    },
    withdraw: async (
      params: MarketTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<MarketTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Market, this, "withdraw", params);
    },
    borrow: async (
      params: MarketTypes.SignExecuteMethodParams<"borrow">
    ): Promise<MarketTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(Market, this, "borrow", params);
    },
    repay: async (
      params: MarketTypes.SignExecuteMethodParams<"repay">
    ): Promise<MarketTypes.SignExecuteMethodResult<"repay">> => {
      return signExecuteMethod(Market, this, "repay", params);
    },
    supplyCollateral: async (
      params: MarketTypes.SignExecuteMethodParams<"supplyCollateral">
    ): Promise<MarketTypes.SignExecuteMethodResult<"supplyCollateral">> => {
      return signExecuteMethod(Market, this, "supplyCollateral", params);
    },
    withdrawCollateral: async (
      params: MarketTypes.SignExecuteMethodParams<"withdrawCollateral">
    ): Promise<MarketTypes.SignExecuteMethodResult<"withdrawCollateral">> => {
      return signExecuteMethod(Market, this, "withdrawCollateral", params);
    },
    liquidate: async (
      params: MarketTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<MarketTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(Market, this, "liquidate", params);
    },
    id: async (
      params: MarketTypes.SignExecuteMethodParams<"id">
    ): Promise<MarketTypes.SignExecuteMethodResult<"id">> => {
      return signExecuteMethod(Market, this, "id", params);
    },
    getLinxContractId: async (
      params: MarketTypes.SignExecuteMethodParams<"getLinxContractId">
    ): Promise<MarketTypes.SignExecuteMethodResult<"getLinxContractId">> => {
      return signExecuteMethod(Market, this, "getLinxContractId", params);
    },
  };

  async multicall<Calls extends MarketTypes.MultiCallParams>(
    calls: Calls
  ): Promise<MarketTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends MarketTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<MarketTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends MarketTypes.MultiCallParams | MarketTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Market, this, callss, getContractByCodeHash);
  }
}
