/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as TestHelperContractJson } from "../lib/linx-lending-core/contracts/test/TestHelper.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  MarketParams,
  MarketState,
  Position,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace TestHelperTypes {
  export type State = Omit<ContractState<any>, "fields">;

  export interface CallMethodTable {
    toSharesDown: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toAssetsDown: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toSharesUp: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    toAssetsUp: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    wMulDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    wDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivDown: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    mulDivUp: {
      params: CallContractParams<{ x: bigint; y: bigint; d: bigint }>;
      result: CallContractResult<bigint>;
    };
    wTaylorCompounded: {
      params: CallContractParams<{ x: bigint; n: bigint }>;
      result: CallContractResult<bigint>;
    };
    exactlyOneZero: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<boolean>;
    };
    zeroFloorSub: {
      params: CallContractParams<{ x: bigint; y: bigint }>;
      result: CallContractResult<bigint>;
    };
    min: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    toBaseUnits: {
      params: CallContractParams<{ amount: bigint; tokenDecimals: bigint }>;
      result: CallContractResult<bigint>;
    };
    calculateInterest: {
      params: CallContractParams<{
        totalBorrowAssets: bigint;
        borrowRate: bigint;
        elapsed: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateFee: {
      params: CallContractParams<{
        fee: bigint;
        interestAmount: bigint;
        totalSupplyAssets: bigint;
        totalSupplyShares: bigint;
      }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    calculateSharesUp: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateSharesDown: {
      params: CallContractParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateAssetsUp: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateAssetsDown: {
      params: CallContractParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMaxBorrow: {
      params: CallContractParams<{
        collateralAssets: bigint;
        collateralPrice: bigint;
        loanToValue: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    calculateMinCollateral: {
      params: CallContractParams<{
        borrowedAssets: bigint;
        collateralPrice: bigint;
        loanToValue: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    toSharesDown: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toAssetsDown: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toSharesUp: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    toAssetsUp: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wMulDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivDown: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wDivUp: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivDown: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    mulDivUp: {
      params: SignExecuteContractMethodParams<{
        x: bigint;
        y: bigint;
        d: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wTaylorCompounded: {
      params: SignExecuteContractMethodParams<{ x: bigint; n: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    exactlyOneZero: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    zeroFloorSub: {
      params: SignExecuteContractMethodParams<{ x: bigint; y: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    min: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    toBaseUnits: {
      params: SignExecuteContractMethodParams<{
        amount: bigint;
        tokenDecimals: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateInterest: {
      params: SignExecuteContractMethodParams<{
        totalBorrowAssets: bigint;
        borrowRate: bigint;
        elapsed: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateFee: {
      params: SignExecuteContractMethodParams<{
        fee: bigint;
        interestAmount: bigint;
        totalSupplyAssets: bigint;
        totalSupplyShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateSharesUp: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateSharesDown: {
      params: SignExecuteContractMethodParams<{
        assets: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateAssetsUp: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateAssetsDown: {
      params: SignExecuteContractMethodParams<{
        shares: bigint;
        totalAssets: bigint;
        totalShares: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateMaxBorrow: {
      params: SignExecuteContractMethodParams<{
        collateralAssets: bigint;
        collateralPrice: bigint;
        loanToValue: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calculateMinCollateral: {
      params: SignExecuteContractMethodParams<{
        borrowedAssets: bigint;
        collateralPrice: bigint;
        loanToValue: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<TestHelperInstance, {}> {
  encodeFields() {
    return encodeContractFields({}, this.contract.fieldsSig, AllStructs);
  }

  consts = {
    VIRTUAL_SHARES: BigInt("1000000"),
    VIRTUAL_ASSETS: BigInt("1"),
    WAD: BigInt("1000000000000000000"),
    MAX_FEE: BigInt("250000000000000000"),
    MAX_LIQUIDATION_INCENTIVE_FACTOR: BigInt("1150000000000000000"),
    LIQUIDATION_CURSOR: BigInt("300000000000000000"),
    ORACLE_PRICE_SCALE: BigInt("1000000000000000000"),
  };

  at(address: string): TestHelperInstance {
    return new TestHelperInstance(address);
  }

  tests = {
    toSharesDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { assets: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toSharesDown", params, getContractByCodeHash);
    },
    toAssetsDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { shares: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toAssetsDown", params, getContractByCodeHash);
    },
    toSharesUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { assets: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toSharesUp", params, getContractByCodeHash);
    },
    toAssetsUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { shares: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toAssetsUp", params, getContractByCodeHash);
    },
    wMulDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wMulDown", params, getContractByCodeHash);
    },
    wDivDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wDivDown", params, getContractByCodeHash);
    },
    wDivUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "wDivUp", params, getContractByCodeHash);
    },
    mulDivDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { x: bigint; y: bigint; d: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDivDown", params, getContractByCodeHash);
    },
    mulDivUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { x: bigint; y: bigint; d: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "mulDivUp", params, getContractByCodeHash);
    },
    wTaylorCompounded: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; n: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: bigint; b: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<boolean>> => {
      return testMethod(this, "exactlyOneZero", params, getContractByCodeHash);
    },
    zeroFloorSub: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { x: bigint; y: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "zeroFloorSub", params, getContractByCodeHash);
    },
    min: async (
      params: Omit<
        TestContractParamsWithoutMaps<never, { a: bigint; b: bigint }>,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { amount: bigint; tokenDecimals: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "toBaseUnits", params, getContractByCodeHash);
    },
    calculateInterest: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { totalBorrowAssets: bigint; borrowRate: bigint; elapsed: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateInterest",
        params,
        getContractByCodeHash
      );
    },
    calculateFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            fee: bigint;
            interestAmount: bigint;
            totalSupplyAssets: bigint;
            totalSupplyShares: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<[bigint, bigint]>> => {
      return testMethod(this, "calculateFee", params, getContractByCodeHash);
    },
    calculateSharesUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { assets: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateSharesUp",
        params,
        getContractByCodeHash
      );
    },
    calculateSharesDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { assets: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateSharesDown",
        params,
        getContractByCodeHash
      );
    },
    calculateAssetsUp: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { shares: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateAssetsUp",
        params,
        getContractByCodeHash
      );
    },
    calculateAssetsDown: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          { shares: bigint; totalAssets: bigint; totalShares: bigint }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateAssetsDown",
        params,
        getContractByCodeHash
      );
    },
    calculateMaxBorrow: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            collateralAssets: bigint;
            collateralPrice: bigint;
            loanToValue: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateMaxBorrow",
        params,
        getContractByCodeHash
      );
    },
    calculateMinCollateral: async (
      params: Omit<
        TestContractParamsWithoutMaps<
          never,
          {
            borrowedAssets: bigint;
            collateralPrice: bigint;
            loanToValue: bigint;
          }
        >,
        "initialFields"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateMinCollateral",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(initFields: {}, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const TestHelper = new Factory(
  Contract.fromJson(
    TestHelperContractJson,
    "",
    "6d0a14e656f458c17c4d09a30011cdde846c95319365a8c49283eb44288872bb",
    AllStructs
  )
);
registerContract(TestHelper);

// Use this class to interact with the blockchain
export class TestHelperInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<TestHelperTypes.State> {
    return fetchContractState(TestHelper, this);
  }

  view = {
    toSharesDown: async (
      params: TestHelperTypes.CallMethodParams<"toSharesDown">
    ): Promise<TestHelperTypes.CallMethodResult<"toSharesDown">> => {
      return callMethod(
        TestHelper,
        this,
        "toSharesDown",
        params,
        getContractByCodeHash
      );
    },
    toAssetsDown: async (
      params: TestHelperTypes.CallMethodParams<"toAssetsDown">
    ): Promise<TestHelperTypes.CallMethodResult<"toAssetsDown">> => {
      return callMethod(
        TestHelper,
        this,
        "toAssetsDown",
        params,
        getContractByCodeHash
      );
    },
    toSharesUp: async (
      params: TestHelperTypes.CallMethodParams<"toSharesUp">
    ): Promise<TestHelperTypes.CallMethodResult<"toSharesUp">> => {
      return callMethod(
        TestHelper,
        this,
        "toSharesUp",
        params,
        getContractByCodeHash
      );
    },
    toAssetsUp: async (
      params: TestHelperTypes.CallMethodParams<"toAssetsUp">
    ): Promise<TestHelperTypes.CallMethodResult<"toAssetsUp">> => {
      return callMethod(
        TestHelper,
        this,
        "toAssetsUp",
        params,
        getContractByCodeHash
      );
    },
    wMulDown: async (
      params: TestHelperTypes.CallMethodParams<"wMulDown">
    ): Promise<TestHelperTypes.CallMethodResult<"wMulDown">> => {
      return callMethod(
        TestHelper,
        this,
        "wMulDown",
        params,
        getContractByCodeHash
      );
    },
    wDivDown: async (
      params: TestHelperTypes.CallMethodParams<"wDivDown">
    ): Promise<TestHelperTypes.CallMethodResult<"wDivDown">> => {
      return callMethod(
        TestHelper,
        this,
        "wDivDown",
        params,
        getContractByCodeHash
      );
    },
    wDivUp: async (
      params: TestHelperTypes.CallMethodParams<"wDivUp">
    ): Promise<TestHelperTypes.CallMethodResult<"wDivUp">> => {
      return callMethod(
        TestHelper,
        this,
        "wDivUp",
        params,
        getContractByCodeHash
      );
    },
    mulDivDown: async (
      params: TestHelperTypes.CallMethodParams<"mulDivDown">
    ): Promise<TestHelperTypes.CallMethodResult<"mulDivDown">> => {
      return callMethod(
        TestHelper,
        this,
        "mulDivDown",
        params,
        getContractByCodeHash
      );
    },
    mulDivUp: async (
      params: TestHelperTypes.CallMethodParams<"mulDivUp">
    ): Promise<TestHelperTypes.CallMethodResult<"mulDivUp">> => {
      return callMethod(
        TestHelper,
        this,
        "mulDivUp",
        params,
        getContractByCodeHash
      );
    },
    wTaylorCompounded: async (
      params: TestHelperTypes.CallMethodParams<"wTaylorCompounded">
    ): Promise<TestHelperTypes.CallMethodResult<"wTaylorCompounded">> => {
      return callMethod(
        TestHelper,
        this,
        "wTaylorCompounded",
        params,
        getContractByCodeHash
      );
    },
    exactlyOneZero: async (
      params: TestHelperTypes.CallMethodParams<"exactlyOneZero">
    ): Promise<TestHelperTypes.CallMethodResult<"exactlyOneZero">> => {
      return callMethod(
        TestHelper,
        this,
        "exactlyOneZero",
        params,
        getContractByCodeHash
      );
    },
    zeroFloorSub: async (
      params: TestHelperTypes.CallMethodParams<"zeroFloorSub">
    ): Promise<TestHelperTypes.CallMethodResult<"zeroFloorSub">> => {
      return callMethod(
        TestHelper,
        this,
        "zeroFloorSub",
        params,
        getContractByCodeHash
      );
    },
    min: async (
      params: TestHelperTypes.CallMethodParams<"min">
    ): Promise<TestHelperTypes.CallMethodResult<"min">> => {
      return callMethod(TestHelper, this, "min", params, getContractByCodeHash);
    },
    toBaseUnits: async (
      params: TestHelperTypes.CallMethodParams<"toBaseUnits">
    ): Promise<TestHelperTypes.CallMethodResult<"toBaseUnits">> => {
      return callMethod(
        TestHelper,
        this,
        "toBaseUnits",
        params,
        getContractByCodeHash
      );
    },
    calculateInterest: async (
      params: TestHelperTypes.CallMethodParams<"calculateInterest">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateInterest">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateInterest",
        params,
        getContractByCodeHash
      );
    },
    calculateFee: async (
      params: TestHelperTypes.CallMethodParams<"calculateFee">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateFee">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateFee",
        params,
        getContractByCodeHash
      );
    },
    calculateSharesUp: async (
      params: TestHelperTypes.CallMethodParams<"calculateSharesUp">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateSharesUp">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateSharesUp",
        params,
        getContractByCodeHash
      );
    },
    calculateSharesDown: async (
      params: TestHelperTypes.CallMethodParams<"calculateSharesDown">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateSharesDown">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateSharesDown",
        params,
        getContractByCodeHash
      );
    },
    calculateAssetsUp: async (
      params: TestHelperTypes.CallMethodParams<"calculateAssetsUp">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateAssetsUp">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateAssetsUp",
        params,
        getContractByCodeHash
      );
    },
    calculateAssetsDown: async (
      params: TestHelperTypes.CallMethodParams<"calculateAssetsDown">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateAssetsDown">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateAssetsDown",
        params,
        getContractByCodeHash
      );
    },
    calculateMaxBorrow: async (
      params: TestHelperTypes.CallMethodParams<"calculateMaxBorrow">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateMaxBorrow">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateMaxBorrow",
        params,
        getContractByCodeHash
      );
    },
    calculateMinCollateral: async (
      params: TestHelperTypes.CallMethodParams<"calculateMinCollateral">
    ): Promise<TestHelperTypes.CallMethodResult<"calculateMinCollateral">> => {
      return callMethod(
        TestHelper,
        this,
        "calculateMinCollateral",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    toSharesDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"toSharesDown">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"toSharesDown">> => {
      return signExecuteMethod(TestHelper, this, "toSharesDown", params);
    },
    toAssetsDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"toAssetsDown">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"toAssetsDown">> => {
      return signExecuteMethod(TestHelper, this, "toAssetsDown", params);
    },
    toSharesUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"toSharesUp">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"toSharesUp">> => {
      return signExecuteMethod(TestHelper, this, "toSharesUp", params);
    },
    toAssetsUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"toAssetsUp">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"toAssetsUp">> => {
      return signExecuteMethod(TestHelper, this, "toAssetsUp", params);
    },
    wMulDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"wMulDown">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"wMulDown">> => {
      return signExecuteMethod(TestHelper, this, "wMulDown", params);
    },
    wDivDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"wDivDown">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"wDivDown">> => {
      return signExecuteMethod(TestHelper, this, "wDivDown", params);
    },
    wDivUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"wDivUp">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"wDivUp">> => {
      return signExecuteMethod(TestHelper, this, "wDivUp", params);
    },
    mulDivDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"mulDivDown">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"mulDivDown">> => {
      return signExecuteMethod(TestHelper, this, "mulDivDown", params);
    },
    mulDivUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"mulDivUp">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"mulDivUp">> => {
      return signExecuteMethod(TestHelper, this, "mulDivUp", params);
    },
    wTaylorCompounded: async (
      params: TestHelperTypes.SignExecuteMethodParams<"wTaylorCompounded">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"wTaylorCompounded">
    > => {
      return signExecuteMethod(TestHelper, this, "wTaylorCompounded", params);
    },
    exactlyOneZero: async (
      params: TestHelperTypes.SignExecuteMethodParams<"exactlyOneZero">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"exactlyOneZero">> => {
      return signExecuteMethod(TestHelper, this, "exactlyOneZero", params);
    },
    zeroFloorSub: async (
      params: TestHelperTypes.SignExecuteMethodParams<"zeroFloorSub">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"zeroFloorSub">> => {
      return signExecuteMethod(TestHelper, this, "zeroFloorSub", params);
    },
    min: async (
      params: TestHelperTypes.SignExecuteMethodParams<"min">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"min">> => {
      return signExecuteMethod(TestHelper, this, "min", params);
    },
    toBaseUnits: async (
      params: TestHelperTypes.SignExecuteMethodParams<"toBaseUnits">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"toBaseUnits">> => {
      return signExecuteMethod(TestHelper, this, "toBaseUnits", params);
    },
    calculateInterest: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateInterest">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateInterest">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateInterest", params);
    },
    calculateFee: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateFee">
    ): Promise<TestHelperTypes.SignExecuteMethodResult<"calculateFee">> => {
      return signExecuteMethod(TestHelper, this, "calculateFee", params);
    },
    calculateSharesUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateSharesUp">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateSharesUp">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateSharesUp", params);
    },
    calculateSharesDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateSharesDown">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateSharesDown">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateSharesDown", params);
    },
    calculateAssetsUp: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateAssetsUp">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateAssetsUp">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateAssetsUp", params);
    },
    calculateAssetsDown: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateAssetsDown">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateAssetsDown">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateAssetsDown", params);
    },
    calculateMaxBorrow: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateMaxBorrow">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateMaxBorrow">
    > => {
      return signExecuteMethod(TestHelper, this, "calculateMaxBorrow", params);
    },
    calculateMinCollateral: async (
      params: TestHelperTypes.SignExecuteMethodParams<"calculateMinCollateral">
    ): Promise<
      TestHelperTypes.SignExecuteMethodResult<"calculateMinCollateral">
    > => {
      return signExecuteMethod(
        TestHelper,
        this,
        "calculateMinCollateral",
        params
      );
    },
  };

  async multicall<Calls extends TestHelperTypes.MultiCallParams>(
    calls: Calls
  ): Promise<TestHelperTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends TestHelperTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<TestHelperTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | TestHelperTypes.MultiCallParams
      | TestHelperTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      TestHelper,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
