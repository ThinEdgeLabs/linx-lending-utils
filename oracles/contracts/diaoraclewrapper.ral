// Interface defining the contract for interacting with the DIA Oracle.
Interface IDIAOracle {
    // Retrieves the value associated with a given key from the DIA Oracle.
    //
    // # Arguments
    //
    // * `key`: The key (typically a market identifier - `ALPH/USD`) to query.
    //
    // # Returns
    //
    // A tuple containing:
    // * `U256`: The value associated with the key.
    // * `U256`: The timestamp of when the value was last updated in the DIA Oracle.
    pub fn getValue(key: ByteVec) -> (U256, U256)
}

// Interface defining a generic Oracle contract that provides a price.
Interface IOracle {
    // Returns the current price.
    //
    // # Returns
    //
    // `U256`: The price, scaled to 10^18.
    pub fn price() -> U256
}

// A wrapper contract for the DIA Oracle, implementing the `IOracle` interface.
// This contract fetches price data from a specific DIA Oracle for a given market
// and ensures the data is not stale based on a defined heartbeat interval.
Contract DIAOracleWrapper(
    diaOracleAddress: Address, 
    marketId: ByteVec, 
    heartbeatInterval: U256
) implements IOracle {
    // The scaling factor used by the `IOracle` interface.
    const DECIMALS = 10^18

    // Enum defining possible error codes within this contract.
    enum ErrorCodes {
        // The price data fetched from the DIA Oracle is older than the allowed heartbeat interval.
        StalePrice = 0
    }

    // Retrieves the price from the underlying DIA Oracle for the configured market.
    //
    // It fetches the raw price and timestamp from the DIA Oracle, checks if the
    // data is stale based on the `heartbeatInterval`, and then returns the price
    // scaled to `DECIMALS` (10^18). If the raw price from DIA is less than
    // `DECIMALS`, it is assumed to be in a smaller unit (10^8) and is scaled up by 10^10.
    //
    // # Returns
    //
    // `U256`: The price scaled to 10^18.
    //
    // # Reverts
    //
    // Reverts with `ErrorCodes.StalePrice` if the timestamp of the fetched price
    // is older than the current block timestamp minus the `heartbeatInterval`.
    @using(checkExternalCaller = false)
    pub fn price() -> U256 {
        let diaContractId = addressToContractId!(diaOracleAddress)
        let (price, timestamp) = IDIAOracle(diaContractId).getValue(marketId)

        assert!(blockTimeStamp!() - timestamp <= heartbeatInterval, ErrorCodes.StalePrice)
        
        // DIA returns values with 8 decimals precision,
        // so we scale them up by 10 decimals 
        // to get the price in 18 decimals precision.
        return if (price < DECIMALS) price * 10^10 else price
    }
}
