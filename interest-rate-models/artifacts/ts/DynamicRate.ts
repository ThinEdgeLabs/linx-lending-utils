/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as DynamicRateContractJson } from "../DynamicRate.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import * as types from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace DynamicRateTypes {
  export type Fields = {
    linx: Address;
  };

  export type State = ContractState<Fields>;

  export type BorrowRateUpdateEvent = ContractEvent<{
    id: HexString;
    avgBorrowRate: bigint;
    newRateAtTarget: bigint;
  }>;

  export interface CallMethodTable {
    initInterest: {
      params: CallContractParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    borrowRate: {
      params: CallContractParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    borrowRateView: {
      params: CallContractParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    getRateAtTarget: {
      params: CallContractParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: CallContractResult<bigint>;
    };
    calcMarketId: {
      params: CallContractParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
    applyCurve: {
      params: CallContractParams<{ rateAtTarget_: bigint; err: bigint }>;
      result: CallContractResult<bigint>;
    };
    newRateAtTarget: {
      params: CallContractParams<{
        startRateAtTarget: bigint;
        linearAdaptation: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    wadExp: {
      params: CallContractParams<{ x: bigint }>;
      result: CallContractResult<bigint>;
    };
    wadDiv: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    wadMul: {
      params: CallContractParams<{ a: bigint; b: bigint }>;
      result: CallContractResult<bigint>;
    };
    calculateBorrowRate: {
      params: CallContractParams<{ id: HexString; market: types.MarketState }>;
      result: CallContractResult<[bigint, bigint]>;
    };
    marketId: {
      params: CallContractParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    initInterest: {
      params: SignExecuteContractMethodParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrowRate: {
      params: SignExecuteContractMethodParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrowRateView: {
      params: SignExecuteContractMethodParams<{
        marketParams: types.MarketParams;
        marketState: types.MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getRateAtTarget: {
      params: SignExecuteContractMethodParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    calcMarketId: {
      params: SignExecuteContractMethodParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    applyCurve: {
      params: SignExecuteContractMethodParams<{
        rateAtTarget_: bigint;
        err: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    newRateAtTarget: {
      params: SignExecuteContractMethodParams<{
        startRateAtTarget: bigint;
        linearAdaptation: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    wadExp: {
      params: SignExecuteContractMethodParams<{ x: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wadDiv: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    wadMul: {
      params: SignExecuteContractMethodParams<{ a: bigint; b: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    calculateBorrowRate: {
      params: SignExecuteContractMethodParams<{
        id: HexString;
        market: types.MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    marketId: {
      params: SignExecuteContractMethodParams<{
        loanToken: HexString;
        collateralToken: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = { rateAtTarget?: Map<HexString, bigint> };
}

class Factory extends ContractFactory<
  DynamicRateInstance,
  DynamicRateTypes.Fields
> {
  encodeFields(fields: DynamicRateTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      types.AllStructs
    );
  }

  eventIndex = { BorrowRateUpdate: 0 };
  consts = {
    MAX_BORROW_RATE: BigInt("100000000000000000000"),
    WAD: BigInt("1000000000000000000"),
    LN_2_INT: BigInt("693147180559945309"),
    LN_WEI_INT: BigInt("-41446531673892822312"),
    WEXP_UPPER_BOUND: BigInt("93859467695000404319"),
    WEXP_UPPER_VALUE: BigInt(
      "57716089161558943949701069502944508345128422502756744429568"
    ),
    TARGET_UTILIZATION: BigInt("900000000000000000"),
    INITIAL_RATE_AT_TARGET: BigInt("1268391679"),
    ADJUSTMENT_SPEED: BigInt("1585489599188"),
    CURVE_STEEPNESS: BigInt("4000000000000000000"),
    MIN_RATE_AT_TARGET: BigInt("31709791"),
    MAX_RATE_AT_TARGET: BigInt("63419583967"),
    ErrorCodes: {
      NotAuthorized: BigInt("0"),
      RateAlreadySet: BigInt("1"),
      InvalidRate: BigInt("2"),
    },
  };

  at(address: string): DynamicRateInstance {
    return new DynamicRateInstance(address);
  }

  tests = {
    initInterest: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { marketParams: types.MarketParams; marketState: types.MarketState },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "initInterest", params, getContractByCodeHash);
    },
    borrowRate: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { marketParams: types.MarketParams; marketState: types.MarketState },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "borrowRate", params, getContractByCodeHash);
    },
    borrowRateView: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { marketParams: types.MarketParams; marketState: types.MarketState },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "borrowRateView", params, getContractByCodeHash);
    },
    getRateAtTarget: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { loanToken: HexString; collateralToken: HexString },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "getRateAtTarget", params, getContractByCodeHash);
    },
    calcMarketId: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { loanToken: HexString; collateralToken: HexString },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<HexString, DynamicRateTypes.Maps>> => {
      return testMethod(this, "calcMarketId", params, getContractByCodeHash);
    },
    applyCurve: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { rateAtTarget_: bigint; err: bigint },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "applyCurve", params, getContractByCodeHash);
    },
    newRateAtTarget: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { startRateAtTarget: bigint; linearAdaptation: bigint },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "newRateAtTarget", params, getContractByCodeHash);
    },
    wadExp: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { x: bigint },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "wadExp", params, getContractByCodeHash);
    },
    wadDiv: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { a: bigint; b: bigint },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "wadDiv", params, getContractByCodeHash);
    },
    wadMul: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { a: bigint; b: bigint },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<bigint, DynamicRateTypes.Maps>> => {
      return testMethod(this, "wadMul", params, getContractByCodeHash);
    },
    calculateBorrowRate: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { id: HexString; market: types.MarketState },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<[bigint, bigint], DynamicRateTypes.Maps>> => {
      return testMethod(
        this,
        "calculateBorrowRate",
        params,
        getContractByCodeHash
      );
    },
    marketId: async (
      params: TestContractParams<
        DynamicRateTypes.Fields,
        { loanToken: HexString; collateralToken: HexString },
        DynamicRateTypes.Maps
      >
    ): Promise<TestContractResult<HexString, DynamicRateTypes.Maps>> => {
      return testMethod(this, "marketId", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: DynamicRateTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: DynamicRateTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const DynamicRate = new Factory(
  Contract.fromJson(
    DynamicRateContractJson,
    "=6-2+7f=2-2+d4=2-1+fd=1+1=2-2=2-2+4e=2-2+aa=2-2+e9=2-1=1-4+5=3-1+1=1-2+31=4-1+e4450=13-1+b=101-1+9=32+7a7e0214696e73657274206174206d617020706174683a2000=2010",
    "95b88680c2c8edb79d9f3ac9add6f08b7fced8db6d74b0f4635523ac10c6a64b",
    types.AllStructs
  )
);
registerContract(DynamicRate);

// Use this class to interact with the blockchain
export class DynamicRateInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    rateAtTarget: new RalphMap<HexString, bigint>(
      DynamicRate.contract,
      this.contractId,
      "rateAtTarget"
    ),
  };

  async fetchState(): Promise<DynamicRateTypes.State> {
    return fetchContractState(DynamicRate, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeBorrowRateUpdateEvent(
    options: EventSubscribeOptions<DynamicRateTypes.BorrowRateUpdateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      DynamicRate.contract,
      this,
      options,
      "BorrowRateUpdate",
      fromCount
    );
  }

  view = {
    initInterest: async (
      params: DynamicRateTypes.CallMethodParams<"initInterest">
    ): Promise<DynamicRateTypes.CallMethodResult<"initInterest">> => {
      return callMethod(
        DynamicRate,
        this,
        "initInterest",
        params,
        getContractByCodeHash
      );
    },
    borrowRate: async (
      params: DynamicRateTypes.CallMethodParams<"borrowRate">
    ): Promise<DynamicRateTypes.CallMethodResult<"borrowRate">> => {
      return callMethod(
        DynamicRate,
        this,
        "borrowRate",
        params,
        getContractByCodeHash
      );
    },
    borrowRateView: async (
      params: DynamicRateTypes.CallMethodParams<"borrowRateView">
    ): Promise<DynamicRateTypes.CallMethodResult<"borrowRateView">> => {
      return callMethod(
        DynamicRate,
        this,
        "borrowRateView",
        params,
        getContractByCodeHash
      );
    },
    getRateAtTarget: async (
      params: DynamicRateTypes.CallMethodParams<"getRateAtTarget">
    ): Promise<DynamicRateTypes.CallMethodResult<"getRateAtTarget">> => {
      return callMethod(
        DynamicRate,
        this,
        "getRateAtTarget",
        params,
        getContractByCodeHash
      );
    },
    calcMarketId: async (
      params: DynamicRateTypes.CallMethodParams<"calcMarketId">
    ): Promise<DynamicRateTypes.CallMethodResult<"calcMarketId">> => {
      return callMethod(
        DynamicRate,
        this,
        "calcMarketId",
        params,
        getContractByCodeHash
      );
    },
    applyCurve: async (
      params: DynamicRateTypes.CallMethodParams<"applyCurve">
    ): Promise<DynamicRateTypes.CallMethodResult<"applyCurve">> => {
      return callMethod(
        DynamicRate,
        this,
        "applyCurve",
        params,
        getContractByCodeHash
      );
    },
    newRateAtTarget: async (
      params: DynamicRateTypes.CallMethodParams<"newRateAtTarget">
    ): Promise<DynamicRateTypes.CallMethodResult<"newRateAtTarget">> => {
      return callMethod(
        DynamicRate,
        this,
        "newRateAtTarget",
        params,
        getContractByCodeHash
      );
    },
    wadExp: async (
      params: DynamicRateTypes.CallMethodParams<"wadExp">
    ): Promise<DynamicRateTypes.CallMethodResult<"wadExp">> => {
      return callMethod(
        DynamicRate,
        this,
        "wadExp",
        params,
        getContractByCodeHash
      );
    },
    wadDiv: async (
      params: DynamicRateTypes.CallMethodParams<"wadDiv">
    ): Promise<DynamicRateTypes.CallMethodResult<"wadDiv">> => {
      return callMethod(
        DynamicRate,
        this,
        "wadDiv",
        params,
        getContractByCodeHash
      );
    },
    wadMul: async (
      params: DynamicRateTypes.CallMethodParams<"wadMul">
    ): Promise<DynamicRateTypes.CallMethodResult<"wadMul">> => {
      return callMethod(
        DynamicRate,
        this,
        "wadMul",
        params,
        getContractByCodeHash
      );
    },
    calculateBorrowRate: async (
      params: DynamicRateTypes.CallMethodParams<"calculateBorrowRate">
    ): Promise<DynamicRateTypes.CallMethodResult<"calculateBorrowRate">> => {
      return callMethod(
        DynamicRate,
        this,
        "calculateBorrowRate",
        params,
        getContractByCodeHash
      );
    },
    marketId: async (
      params: DynamicRateTypes.CallMethodParams<"marketId">
    ): Promise<DynamicRateTypes.CallMethodResult<"marketId">> => {
      return callMethod(
        DynamicRate,
        this,
        "marketId",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    initInterest: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"initInterest">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"initInterest">> => {
      return signExecuteMethod(DynamicRate, this, "initInterest", params);
    },
    borrowRate: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"borrowRate">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"borrowRate">> => {
      return signExecuteMethod(DynamicRate, this, "borrowRate", params);
    },
    borrowRateView: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"borrowRateView">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"borrowRateView">> => {
      return signExecuteMethod(DynamicRate, this, "borrowRateView", params);
    },
    getRateAtTarget: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"getRateAtTarget">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"getRateAtTarget">> => {
      return signExecuteMethod(DynamicRate, this, "getRateAtTarget", params);
    },
    calcMarketId: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"calcMarketId">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"calcMarketId">> => {
      return signExecuteMethod(DynamicRate, this, "calcMarketId", params);
    },
    applyCurve: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"applyCurve">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"applyCurve">> => {
      return signExecuteMethod(DynamicRate, this, "applyCurve", params);
    },
    newRateAtTarget: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"newRateAtTarget">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"newRateAtTarget">> => {
      return signExecuteMethod(DynamicRate, this, "newRateAtTarget", params);
    },
    wadExp: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"wadExp">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"wadExp">> => {
      return signExecuteMethod(DynamicRate, this, "wadExp", params);
    },
    wadDiv: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"wadDiv">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"wadDiv">> => {
      return signExecuteMethod(DynamicRate, this, "wadDiv", params);
    },
    wadMul: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"wadMul">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"wadMul">> => {
      return signExecuteMethod(DynamicRate, this, "wadMul", params);
    },
    calculateBorrowRate: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"calculateBorrowRate">
    ): Promise<
      DynamicRateTypes.SignExecuteMethodResult<"calculateBorrowRate">
    > => {
      return signExecuteMethod(
        DynamicRate,
        this,
        "calculateBorrowRate",
        params
      );
    },
    marketId: async (
      params: DynamicRateTypes.SignExecuteMethodParams<"marketId">
    ): Promise<DynamicRateTypes.SignExecuteMethodResult<"marketId">> => {
      return signExecuteMethod(DynamicRate, this, "marketId", params);
    },
  };

  async multicall<Calls extends DynamicRateTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DynamicRateTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends DynamicRateTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<DynamicRateTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | DynamicRateTypes.MultiCallParams
      | DynamicRateTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      DynamicRate,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
