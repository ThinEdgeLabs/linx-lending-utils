/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as FixedRateContractJson } from "../FixedRate.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { MarketParams, MarketState, AllStructs } from "./types";

// Custom types for the contract
export namespace FixedRateTypes {
  export type Fields = {
    admin: Address;
    rate: bigint;
    rateUpdated: boolean;
  };

  export type State = ContractState<Fields>;

  export type RateSetEvent = ContractEvent<{
    setter: Address;
    oldRate: bigint;
    newRate: bigint;
  }>;

  export interface CallMethodTable {
    borrowRate: {
      params: CallContractParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: CallContractResult<bigint>;
    };
    getRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    setBorrowRate: {
      params: CallContractParams<{ newBorrowRate: bigint }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    borrowRate: {
      params: SignExecuteContractMethodParams<{
        marketParams: MarketParams;
        marketState: MarketState;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setBorrowRate: {
      params: SignExecuteContractMethodParams<{ newBorrowRate: bigint }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  FixedRateInstance,
  FixedRateTypes.Fields
> {
  encodeFields(fields: FixedRateTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = { RateSet: 0 };
  consts = {
    MAX_BORROW_RATE: BigInt("100000000000000000000"),
    WAD: BigInt("1000000000000000000"),
    LN_2_INT: BigInt("693147180559945309"),
    LN_WEI_INT: BigInt("-41446531673892822312"),
    WEXP_UPPER_BOUND: BigInt("93859467695000404319"),
    WEXP_UPPER_VALUE: BigInt(
      "57716089161558943949701069502944508345128422502756744429568"
    ),
    TARGET_UTILIZATION: BigInt("900000000000000000"),
    INITIAL_RATE_AT_TARGET: BigInt("1268391679"),
    ADJUSTMENT_SPEED: BigInt("1585489599188"),
    CURVE_STEEPNESS: BigInt("4000000000000000000"),
    MIN_RATE_AT_TARGET: BigInt("31709791"),
    MAX_RATE_AT_TARGET: BigInt("63419583967"),
    ErrorCodes: {
      NotAuthorized: BigInt("0"),
      RateAlreadySet: BigInt("1"),
      InvalidRate: BigInt("2"),
    },
  };

  at(address: string): FixedRateInstance {
    return new FixedRateInstance(address);
  }

  tests = {
    borrowRate: async (
      params: TestContractParamsWithoutMaps<
        FixedRateTypes.Fields,
        { marketParams: MarketParams; marketState: MarketState }
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "borrowRate", params, getContractByCodeHash);
    },
    getRate: async (
      params: Omit<
        TestContractParamsWithoutMaps<FixedRateTypes.Fields, never>,
        "args"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getRate", params, getContractByCodeHash);
    },
    setBorrowRate: async (
      params: TestContractParamsWithoutMaps<
        FixedRateTypes.Fields,
        { newBorrowRate: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setBorrowRate", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: FixedRateTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const FixedRate = new Factory(
  Contract.fromJson(
    FixedRateContractJson,
    "",
    "4646a0be7f5de97e150b6eb7cc3683d60cba5499986533f80c9bd575e64532f0",
    AllStructs
  )
);
registerContract(FixedRate);

// Use this class to interact with the blockchain
export class FixedRateInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FixedRateTypes.State> {
    return fetchContractState(FixedRate, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeRateSetEvent(
    options: EventSubscribeOptions<FixedRateTypes.RateSetEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      FixedRate.contract,
      this,
      options,
      "RateSet",
      fromCount
    );
  }

  view = {
    borrowRate: async (
      params: FixedRateTypes.CallMethodParams<"borrowRate">
    ): Promise<FixedRateTypes.CallMethodResult<"borrowRate">> => {
      return callMethod(
        FixedRate,
        this,
        "borrowRate",
        params,
        getContractByCodeHash
      );
    },
    getRate: async (
      params?: FixedRateTypes.CallMethodParams<"getRate">
    ): Promise<FixedRateTypes.CallMethodResult<"getRate">> => {
      return callMethod(
        FixedRate,
        this,
        "getRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setBorrowRate: async (
      params: FixedRateTypes.CallMethodParams<"setBorrowRate">
    ): Promise<FixedRateTypes.CallMethodResult<"setBorrowRate">> => {
      return callMethod(
        FixedRate,
        this,
        "setBorrowRate",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    borrowRate: async (
      params: FixedRateTypes.SignExecuteMethodParams<"borrowRate">
    ): Promise<FixedRateTypes.SignExecuteMethodResult<"borrowRate">> => {
      return signExecuteMethod(FixedRate, this, "borrowRate", params);
    },
    getRate: async (
      params: FixedRateTypes.SignExecuteMethodParams<"getRate">
    ): Promise<FixedRateTypes.SignExecuteMethodResult<"getRate">> => {
      return signExecuteMethod(FixedRate, this, "getRate", params);
    },
    setBorrowRate: async (
      params: FixedRateTypes.SignExecuteMethodParams<"setBorrowRate">
    ): Promise<FixedRateTypes.SignExecuteMethodResult<"setBorrowRate">> => {
      return signExecuteMethod(FixedRate, this, "setBorrowRate", params);
    },
  };

  async multicall<Calls extends FixedRateTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FixedRateTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends FixedRateTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<FixedRateTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | FixedRateTypes.MultiCallParams
      | FixedRateTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      FixedRate,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
